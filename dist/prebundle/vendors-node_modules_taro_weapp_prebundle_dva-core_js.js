"use strict";
(wx["webpackJsonp"] = wx["webpackJsonp"] || []).push([["vendors-node_modules_taro_weapp_prebundle_dva-core_js"],{

/***/ "./node_modules/.taro/weapp/prebundle/chunk-VU5FV6F3.js":
/*!**************************************************************!*\
  !*** ./node_modules/.taro/weapp/prebundle/chunk-VU5FV6F3.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "_objectSpread2": function() { return /* binding */ _objectSpread2; },
/* harmony export */   "init_objectSpread2": function() { return /* binding */ init_objectSpread2; },
/* harmony export */   "_classCallCheck": function() { return /* binding */ _classCallCheck; },
/* harmony export */   "init_classCallCheck": function() { return /* binding */ init_classCallCheck; },
/* harmony export */   "_createClass": function() { return /* binding */ _createClass; },
/* harmony export */   "init_createClass": function() { return /* binding */ init_createClass; }
/* harmony export */ });
/* harmony import */ var _chunk_UFJBA2XG_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-UFJBA2XG.js */ "./node_modules/.taro/weapp/prebundle/chunk-UFJBA2XG.js");
/* harmony import */ var _chunk_P7VEE7PG_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chunk-P7VEE7PG.js */ "./node_modules/.taro/weapp/prebundle/chunk-P7VEE7PG.js");


// node_modules/.pnpm/@babel+runtime@7.21.0/node_modules/@babel/runtime/helpers/esm/classCallCheck.js
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
var init_classCallCheck = (0,_chunk_P7VEE7PG_js__WEBPACK_IMPORTED_MODULE_1__.__esm)({
    "node_modules/.pnpm/@babel+runtime@7.21.0/node_modules/@babel/runtime/helpers/esm/classCallCheck.js" () {}
});
// node_modules/.pnpm/@babel+runtime@7.21.0/node_modules/@babel/runtime/helpers/esm/createClass.js
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, (0,_chunk_UFJBA2XG_js__WEBPACK_IMPORTED_MODULE_0__._toPropertyKey)(descriptor.key), descriptor);
    }
}
function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    Object.defineProperty(Constructor, "prototype", {
        writable: false
    });
    return Constructor;
}
var init_createClass = (0,_chunk_P7VEE7PG_js__WEBPACK_IMPORTED_MODULE_1__.__esm)({
    "node_modules/.pnpm/@babel+runtime@7.21.0/node_modules/@babel/runtime/helpers/esm/createClass.js" () {
        (0,_chunk_UFJBA2XG_js__WEBPACK_IMPORTED_MODULE_0__.init_toPropertyKey)();
    }
});
// node_modules/.pnpm/@babel+runtime@7.21.0/node_modules/@babel/runtime/helpers/esm/objectSpread2.js
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
    }
    return keys;
}
function _objectSpread2(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
            (0,_chunk_UFJBA2XG_js__WEBPACK_IMPORTED_MODULE_0__._defineProperty)(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
var init_objectSpread2 = (0,_chunk_P7VEE7PG_js__WEBPACK_IMPORTED_MODULE_1__.__esm)({
    "node_modules/.pnpm/@babel+runtime@7.21.0/node_modules/@babel/runtime/helpers/esm/objectSpread2.js" () {
        (0,_chunk_UFJBA2XG_js__WEBPACK_IMPORTED_MODULE_0__.init_defineProperty)();
    }
});



/***/ }),

/***/ "./node_modules/.taro/weapp/prebundle/dva-core.js":
/*!********************************************************!*\
  !*** ./node_modules/.taro/weapp/prebundle/dva-core.js ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "create": function() { return /* binding */ create; },
/* harmony export */   "saga": function() { return /* binding */ es_exports; },
/* harmony export */   "utils": function() { return /* binding */ utils; }
/* harmony export */ });
/* harmony import */ var _chunk_VU5FV6F3_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-VU5FV6F3.js */ "./node_modules/.taro/weapp/prebundle/chunk-VU5FV6F3.js");
/* harmony import */ var _chunk_L5W4WYYH_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chunk-L5W4WYYH.js */ "./node_modules/.taro/weapp/prebundle/chunk-L5W4WYYH.js");
/* harmony import */ var _chunk_UFJBA2XG_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./chunk-UFJBA2XG.js */ "./node_modules/.taro/weapp/prebundle/chunk-UFJBA2XG.js");
/* harmony import */ var _chunk_P7VEE7PG_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./chunk-P7VEE7PG.js */ "./node_modules/.taro/weapp/prebundle/chunk-P7VEE7PG.js");
/* provided dependency */ var window = __webpack_require__(/*! ./node_modules/.taro/weapp/prebundle/chunk-VYWETQAV.js */ "./node_modules/.taro/weapp/prebundle/chunk-VYWETQAV.js")["window$1"];




// node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/browser.js
var require_browser = (0,_chunk_P7VEE7PG_js__WEBPACK_IMPORTED_MODULE_3__.__commonJS)({
    "node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/browser.js" (exports, module) {
        "use strict";
        var invariant2 = function(condition, format, a, b, c, d, e, f) {
            if (true) {
                if (format === void 0) {
                    throw new Error("invariant requires an error message argument");
                }
            }
            if (!condition) {
                var error;
                if (format === void 0) {
                    error = new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");
                } else {
                    var args = [
                        a,
                        b,
                        c,
                        d,
                        e,
                        f
                    ];
                    var argIndex = 0;
                    error = new Error(format.replace(/%s/g, function() {
                        return args[argIndex++];
                    }));
                    error.name = "Invariant Violation";
                }
                error.framesToPop = 1;
                throw error;
            }
        };
        module.exports = invariant2;
    }
});
// node_modules/.pnpm/isobject@3.0.1/node_modules/isobject/index.js
var require_isobject = (0,_chunk_P7VEE7PG_js__WEBPACK_IMPORTED_MODULE_3__.__commonJS)({
    "node_modules/.pnpm/isobject@3.0.1/node_modules/isobject/index.js" (exports, module) {
        "use strict";
        module.exports = function isObject(val) {
            return val != null && typeof val === "object" && Array.isArray(val) === false;
        };
    }
});
// node_modules/.pnpm/is-plain-object@2.0.4/node_modules/is-plain-object/index.js
var require_is_plain_object = (0,_chunk_P7VEE7PG_js__WEBPACK_IMPORTED_MODULE_3__.__commonJS)({
    "node_modules/.pnpm/is-plain-object@2.0.4/node_modules/is-plain-object/index.js" (exports, module) {
        "use strict";
        var isObject = require_isobject();
        function isObjectObject(o) {
            return isObject(o) === true && Object.prototype.toString.call(o) === "[object Object]";
        }
        module.exports = function isPlainObject3(o) {
            var ctor, prot;
            if (isObjectObject(o) === false) return false;
            ctor = o.constructor;
            if (typeof ctor !== "function") return false;
            prot = ctor.prototype;
            if (isObjectObject(prot) === false) return false;
            if (prot.hasOwnProperty("isPrototypeOf") === false) {
                return false;
            }
            return true;
        };
    }
});
// node_modules/.pnpm/warning@3.0.0/node_modules/warning/browser.js
var require_browser2 = (0,_chunk_P7VEE7PG_js__WEBPACK_IMPORTED_MODULE_3__.__commonJS)({
    "node_modules/.pnpm/warning@3.0.0/node_modules/warning/browser.js" (exports, module) {
        "use strict";
        var warning3 = function() {};
        if (true) {
            warning3 = function(condition, format, args) {
                var len = arguments.length;
                args = new Array(len > 2 ? len - 2 : 0);
                for(var key = 2; key < len; key++){
                    args[key - 2] = arguments[key];
                }
                if (format === void 0) {
                    throw new Error("`warning(condition, format, ...args)` requires a warning message argument");
                }
                if (format.length < 10 || /^[s\W]*$/.test(format)) {
                    throw new Error("The warning format should be able to uniquely identify this warning. Please, use a more descriptive format than: " + format);
                }
                if (!condition) {
                    var argIndex = 0;
                    var message = "Warning: " + format.replace(/%s/g, function() {
                        return args[argIndex++];
                    });
                    if (typeof console !== "undefined") {
                        console.error(message);
                    }
                    try {
                        throw new Error(message);
                    } catch (x) {}
                }
            };
        }
        module.exports = warning3;
    }
});
// node_modules/.pnpm/flatten@1.0.3/node_modules/flatten/index.js
var require_flatten = (0,_chunk_P7VEE7PG_js__WEBPACK_IMPORTED_MODULE_3__.__commonJS)({
    "node_modules/.pnpm/flatten@1.0.3/node_modules/flatten/index.js" (exports, module) {
        module.exports = function flatten2(list, depth) {
            depth = typeof depth == "number" ? depth : Infinity;
            if (!depth) {
                if (Array.isArray(list)) {
                    return list.map(function(i) {
                        return i;
                    });
                }
                return list;
            }
            return _flatten(list, 1);
            function _flatten(list2, d) {
                return list2.reduce(function(acc, item) {
                    if (Array.isArray(item) && d < depth) {
                        return acc.concat(_flatten(item, d + 1));
                    } else {
                        return acc.concat(item);
                    }
                }, []);
            }
        };
    }
});
// node_modules/.pnpm/global@4.4.0/node_modules/global/window.js
var require_window = (0,_chunk_P7VEE7PG_js__WEBPACK_IMPORTED_MODULE_3__.__commonJS)({
    "node_modules/.pnpm/global@4.4.0/node_modules/global/window.js" (exports, module) {
        var win2;
        if (typeof window !== "undefined") {
            win2 = window;
        } else if (typeof __webpack_require__.g !== "undefined") {
            win2 = __webpack_require__.g;
        } else if (typeof self !== "undefined") {
            win2 = self;
        } else {
            win2 = {};
        }
        module.exports = win2;
    }
});
// node_modules/.pnpm/redux@4.2.1/node_modules/redux/es/redux.js
(0,_chunk_VU5FV6F3_js__WEBPACK_IMPORTED_MODULE_0__.init_objectSpread2)();
var $$observable = function() {
    return typeof Symbol === "function" && Symbol.observable || "@@observable";
}();
var randomString = function randomString2() {
    return Math.random().toString(36).substring(7).split("").join(".");
};
var ActionTypes = {
    INIT: "@@redux/INIT" + randomString(),
    REPLACE: "@@redux/REPLACE" + randomString(),
    PROBE_UNKNOWN_ACTION: function PROBE_UNKNOWN_ACTION() {
        return "@@redux/PROBE_UNKNOWN_ACTION" + randomString();
    }
};
function isPlainObject(obj) {
    if (typeof obj !== "object" || obj === null) return false;
    var proto = obj;
    while(Object.getPrototypeOf(proto) !== null){
        proto = Object.getPrototypeOf(proto);
    }
    return Object.getPrototypeOf(obj) === proto;
}
function miniKindOf(val) {
    if (val === void 0) return "undefined";
    if (val === null) return "null";
    var type = typeof val;
    switch(type){
        case "boolean":
        case "string":
        case "number":
        case "symbol":
        case "function":
            {
                return type;
            }
    }
    if (Array.isArray(val)) return "array";
    if (isDate(val)) return "date";
    if (isError(val)) return "error";
    var constructorName = ctorName(val);
    switch(constructorName){
        case "Symbol":
        case "Promise":
        case "WeakMap":
        case "WeakSet":
        case "Map":
        case "Set":
            return constructorName;
    }
    return type.slice(8, -1).toLowerCase().replace(/\s/g, "");
}
function ctorName(val) {
    return typeof val.constructor === "function" ? val.constructor.name : null;
}
function isError(val) {
    return val instanceof Error || typeof val.message === "string" && val.constructor && typeof val.constructor.stackTraceLimit === "number";
}
function isDate(val) {
    if (val instanceof Date) return true;
    return typeof val.toDateString === "function" && typeof val.getDate === "function" && typeof val.setDate === "function";
}
function kindOf(val) {
    var typeOfVal = typeof val;
    if (true) {
        typeOfVal = miniKindOf(val);
    }
    return typeOfVal;
}
function createStore(reducer, preloadedState, enhancer) {
    var _ref2;
    if (typeof preloadedState === "function" && typeof enhancer === "function" || typeof enhancer === "function" && typeof arguments[3] === "function") {
        throw new Error( false ? 0 : "It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function. See https://redux.js.org/tutorials/fundamentals/part-4-store#creating-a-store-with-enhancers for an example.");
    }
    if (typeof preloadedState === "function" && typeof enhancer === "undefined") {
        enhancer = preloadedState;
        preloadedState = void 0;
    }
    if (typeof enhancer !== "undefined") {
        if (typeof enhancer !== "function") {
            throw new Error( false ? 0 : "Expected the enhancer to be a function. Instead, received: '" + kindOf(enhancer) + "'");
        }
        return enhancer(createStore)(reducer, preloadedState);
    }
    if (typeof reducer !== "function") {
        throw new Error( false ? 0 : "Expected the root reducer to be a function. Instead, received: '" + kindOf(reducer) + "'");
    }
    var currentReducer = reducer;
    var currentState = preloadedState;
    var currentListeners = [];
    var nextListeners = currentListeners;
    var isDispatching = false;
    function ensureCanMutateNextListeners() {
        if (nextListeners === currentListeners) {
            nextListeners = currentListeners.slice();
        }
    }
    function getState() {
        if (isDispatching) {
            throw new Error( false ? 0 : "You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");
        }
        return currentState;
    }
    function subscribe(listener) {
        if (typeof listener !== "function") {
            throw new Error( false ? 0 : "Expected the listener to be a function. Instead, received: '" + kindOf(listener) + "'");
        }
        if (isDispatching) {
            throw new Error( false ? 0 : "You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api/store#subscribelistener for more details.");
        }
        var isSubscribed = true;
        ensureCanMutateNextListeners();
        nextListeners.push(listener);
        return function unsubscribe() {
            if (!isSubscribed) {
                return;
            }
            if (isDispatching) {
                throw new Error( false ? 0 : "You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api/store#subscribelistener for more details.");
            }
            isSubscribed = false;
            ensureCanMutateNextListeners();
            var index = nextListeners.indexOf(listener);
            nextListeners.splice(index, 1);
            currentListeners = null;
        };
    }
    function dispatch(action) {
        if (!isPlainObject(action)) {
            throw new Error( false ? 0 : "Actions must be plain objects. Instead, the actual type was: '" + kindOf(action) + "'. You may need to add middleware to your store setup to handle dispatching other values, such as 'redux-thunk' to handle dispatching functions. See https://redux.js.org/tutorials/fundamentals/part-4-store#middleware and https://redux.js.org/tutorials/fundamentals/part-6-async-logic#using-the-redux-thunk-middleware for examples.");
        }
        if (typeof action.type === "undefined") {
            throw new Error( false ? 0 : 'Actions may not have an undefined "type" property. You may have misspelled an action type string constant.');
        }
        if (isDispatching) {
            throw new Error( false ? 0 : "Reducers may not dispatch actions.");
        }
        try {
            isDispatching = true;
            currentState = currentReducer(currentState, action);
        } finally{
            isDispatching = false;
        }
        var listeners = currentListeners = nextListeners;
        for(var i = 0; i < listeners.length; i++){
            var listener = listeners[i];
            listener();
        }
        return action;
    }
    function replaceReducer(nextReducer) {
        if (typeof nextReducer !== "function") {
            throw new Error( false ? 0 : "Expected the nextReducer to be a function. Instead, received: '" + kindOf(nextReducer));
        }
        currentReducer = nextReducer;
        dispatch({
            type: ActionTypes.REPLACE
        });
    }
    function observable2() {
        var _ref;
        var outerSubscribe = subscribe;
        return _ref = {
            subscribe: function subscribe2(observer) {
                if (typeof observer !== "object" || observer === null) {
                    throw new Error( false ? 0 : "Expected the observer to be an object. Instead, received: '" + kindOf(observer) + "'");
                }
                function observeState() {
                    if (observer.next) {
                        observer.next(getState());
                    }
                }
                observeState();
                var unsubscribe = outerSubscribe(observeState);
                return {
                    unsubscribe
                };
            }
        }, _ref[$$observable] = function() {
            return this;
        }, _ref;
    }
    dispatch({
        type: ActionTypes.INIT
    });
    return _ref2 = {
        dispatch,
        subscribe,
        getState,
        replaceReducer
    }, _ref2[$$observable] = observable2, _ref2;
}
function warning(message) {
    if (typeof console !== "undefined" && typeof console.error === "function") {
        console.error(message);
    }
    try {
        throw new Error(message);
    } catch (e) {}
}
function getUnexpectedStateShapeWarningMessage(inputState, reducers, action, unexpectedKeyCache) {
    var reducerKeys = Object.keys(reducers);
    var argumentName = action && action.type === ActionTypes.INIT ? "preloadedState argument passed to createStore" : "previous state received by the reducer";
    if (reducerKeys.length === 0) {
        return "Store does not have a valid reducer. Make sure the argument passed to combineReducers is an object whose values are reducers.";
    }
    if (!isPlainObject(inputState)) {
        return "The " + argumentName + ' has unexpected type of "' + kindOf(inputState) + '". Expected argument to be an object with the following ' + ('keys: "' + reducerKeys.join('", "') + '"');
    }
    var unexpectedKeys = Object.keys(inputState).filter(function(key) {
        return !reducers.hasOwnProperty(key) && !unexpectedKeyCache[key];
    });
    unexpectedKeys.forEach(function(key) {
        unexpectedKeyCache[key] = true;
    });
    if (action && action.type === ActionTypes.REPLACE) return;
    if (unexpectedKeys.length > 0) {
        return "Unexpected " + (unexpectedKeys.length > 1 ? "keys" : "key") + " " + ('"' + unexpectedKeys.join('", "') + '" found in ' + argumentName + ". ") + "Expected to find one of the known reducer keys instead: " + ('"' + reducerKeys.join('", "') + '". Unexpected keys will be ignored.');
    }
}
function assertReducerShape(reducers) {
    Object.keys(reducers).forEach(function(key) {
        var reducer = reducers[key];
        var initialState = reducer(void 0, {
            type: ActionTypes.INIT
        });
        if (typeof initialState === "undefined") {
            throw new Error( false ? 0 : 'The slice reducer for key "' + key + `" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.`);
        }
        if (typeof reducer(void 0, {
            type: ActionTypes.PROBE_UNKNOWN_ACTION()
        }) === "undefined") {
            throw new Error( false ? 0 : 'The slice reducer for key "' + key + '" returned undefined when probed with a random type. ' + ("Don't try to handle '" + ActionTypes.INIT + `' or other actions in "redux/*" `) + "namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.");
        }
    });
}
function combineReducers(reducers) {
    var reducerKeys = Object.keys(reducers);
    var finalReducers = {};
    for(var i = 0; i < reducerKeys.length; i++){
        var key = reducerKeys[i];
        if (true) {
            if (typeof reducers[key] === "undefined") {
                warning('No reducer provided for key "' + key + '"');
            }
        }
        if (typeof reducers[key] === "function") {
            finalReducers[key] = reducers[key];
        }
    }
    var finalReducerKeys = Object.keys(finalReducers);
    var unexpectedKeyCache;
    if (true) {
        unexpectedKeyCache = {};
    }
    var shapeAssertionError;
    try {
        assertReducerShape(finalReducers);
    } catch (e) {
        shapeAssertionError = e;
    }
    return function combination(state, action) {
        if (state === void 0) {
            state = {};
        }
        if (shapeAssertionError) {
            throw shapeAssertionError;
        }
        if (true) {
            var warningMessage = getUnexpectedStateShapeWarningMessage(state, finalReducers, action, unexpectedKeyCache);
            if (warningMessage) {
                warning(warningMessage);
            }
        }
        var hasChanged = false;
        var nextState = {};
        for(var _i = 0; _i < finalReducerKeys.length; _i++){
            var _key = finalReducerKeys[_i];
            var reducer = finalReducers[_key];
            var previousStateForKey = state[_key];
            var nextStateForKey = reducer(previousStateForKey, action);
            if (typeof nextStateForKey === "undefined") {
                var actionType = action && action.type;
                throw new Error( false ? 0 : "When called with an action of type " + (actionType ? '"' + String(actionType) + '"' : "(unknown type)") + ', the slice reducer for key "' + _key + '" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.');
            }
            nextState[_key] = nextStateForKey;
            hasChanged = hasChanged || nextStateForKey !== previousStateForKey;
        }
        hasChanged = hasChanged || finalReducerKeys.length !== Object.keys(state).length;
        return hasChanged ? nextState : state;
    };
}
function compose() {
    for(var _len = arguments.length, funcs = new Array(_len), _key = 0; _key < _len; _key++){
        funcs[_key] = arguments[_key];
    }
    if (funcs.length === 0) {
        return function(arg) {
            return arg;
        };
    }
    if (funcs.length === 1) {
        return funcs[0];
    }
    return funcs.reduce(function(a, b) {
        return function() {
            return a(b.apply(void 0, arguments));
        };
    });
}
function applyMiddleware() {
    for(var _len = arguments.length, middlewares = new Array(_len), _key = 0; _key < _len; _key++){
        middlewares[_key] = arguments[_key];
    }
    return function(createStore3) {
        return function() {
            var store = createStore3.apply(void 0, arguments);
            var _dispatch = function dispatch() {
                throw new Error( false ? 0 : "Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.");
            };
            var middlewareAPI = {
                getState: store.getState,
                dispatch: function dispatch() {
                    return _dispatch.apply(void 0, arguments);
                }
            };
            var chain = middlewares.map(function(middleware) {
                return middleware(middlewareAPI);
            });
            _dispatch = compose.apply(void 0, chain)(store.dispatch);
            return (0,_chunk_VU5FV6F3_js__WEBPACK_IMPORTED_MODULE_0__._objectSpread2)((0,_chunk_VU5FV6F3_js__WEBPACK_IMPORTED_MODULE_0__._objectSpread2)({}, store), {}, {
                dispatch: _dispatch
            });
        };
    };
}
// node_modules/.pnpm/redux-saga@0.16.2/node_modules/redux-saga/es/index.js
var es_exports = {};
(0,_chunk_P7VEE7PG_js__WEBPACK_IMPORTED_MODULE_3__.__export)(es_exports, {
    CANCEL: ()=>CANCEL,
    END: ()=>END,
    buffers: ()=>buffers,
    channel: ()=>channel2,
    default: ()=>es_default,
    delay: ()=>delay,
    detach: ()=>detach,
    effects: ()=>effects_exports,
    eventChannel: ()=>eventChannel,
    runSaga: ()=>runSaga,
    takeEvery: ()=>takeEvery2,
    takeLatest: ()=>takeLatest2,
    throttle: ()=>throttle2,
    utils: ()=>utils_exports
});
// node_modules/.pnpm/redux-saga@0.16.2/node_modules/redux-saga/es/internal/utils.js
var _extends = Object.assign || function(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i];
        for(var key in source){
            if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
            }
        }
    }
    return target;
};
var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
    return typeof obj;
} : function(obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};
var sym = function sym2(id) {
    return "@@redux-saga/" + id;
};
var TASK = sym("TASK");
var HELPER = sym("HELPER");
var MATCH = sym("MATCH");
var CANCEL = sym("CANCEL_PROMISE");
var SAGA_ACTION = sym("SAGA_ACTION");
var SELF_CANCELLATION = sym("SELF_CANCELLATION");
var konst = function konst2(v) {
    return function() {
        return v;
    };
};
var kTrue = konst(true);
var kFalse = konst(false);
var noop = function noop2() {};
var ident = function ident2(v) {
    return v;
};
function check(value, predicate2, error) {
    if (!predicate2(value)) {
        log("error", "uncaught at check", error);
        throw new Error(error);
    }
}
var hasOwnProperty = Object.prototype.hasOwnProperty;
function hasOwn(object3, property) {
    return is.notUndef(object3) && hasOwnProperty.call(object3, property);
}
var is = {
    undef: function undef(v) {
        return v === null || v === void 0;
    },
    notUndef: function notUndef(v) {
        return v !== null && v !== void 0;
    },
    func: function func(f) {
        return typeof f === "function";
    },
    number: function number(n) {
        return typeof n === "number";
    },
    string: function string(s) {
        return typeof s === "string";
    },
    array: Array.isArray,
    object: function object(obj) {
        return obj && !is.array(obj) && (typeof obj === "undefined" ? "undefined" : _typeof2(obj)) === "object";
    },
    promise: function promise(p) {
        return p && is.func(p.then);
    },
    iterator: function iterator(it) {
        return it && is.func(it.next) && is.func(it.throw);
    },
    iterable: function iterable(it) {
        return it && is.func(Symbol) ? is.func(it[Symbol.iterator]) : is.array(it);
    },
    task: function task(t) {
        return t && t[TASK];
    },
    observable: function observable(ob) {
        return ob && is.func(ob.subscribe);
    },
    buffer: function buffer(buf) {
        return buf && is.func(buf.isEmpty) && is.func(buf.take) && is.func(buf.put);
    },
    pattern: function pattern(pat) {
        return pat && (is.string(pat) || (typeof pat === "undefined" ? "undefined" : _typeof2(pat)) === "symbol" || is.func(pat) || is.array(pat));
    },
    channel: function channel(ch) {
        return ch && is.func(ch.take) && is.func(ch.close);
    },
    helper: function helper(it) {
        return it && it[HELPER];
    },
    stringableFunc: function stringableFunc(f) {
        return is.func(f) && hasOwn(f, "toString");
    }
};
var object2 = {
    assign: function assign(target, source) {
        for(var i in source){
            if (hasOwn(source, i)) {
                target[i] = source[i];
            }
        }
    }
};
function remove(array3, item) {
    var index = array3.indexOf(item);
    if (index >= 0) {
        array3.splice(index, 1);
    }
}
var array = {
    from: function from(obj) {
        var arr = Array(obj.length);
        for(var i in obj){
            if (hasOwn(obj, i)) {
                arr[i] = obj[i];
            }
        }
        return arr;
    }
};
function deferred() {
    var props = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    var def = _extends({}, props);
    var promise2 = new Promise(function(resolve, reject) {
        def.resolve = resolve;
        def.reject = reject;
    });
    def.promise = promise2;
    return def;
}
function arrayOfDeffered(length) {
    var arr = [];
    for(var i = 0; i < length; i++){
        arr.push(deferred());
    }
    return arr;
}
function delay(ms) {
    var val = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
    var timeoutId = void 0;
    var promise2 = new Promise(function(resolve) {
        timeoutId = setTimeout(function() {
            return resolve(val);
        }, ms);
    });
    promise2[CANCEL] = function() {
        return clearTimeout(timeoutId);
    };
    return promise2;
}
function createMockTask() {
    var _ref;
    var running = true;
    var _result = void 0, _error = void 0;
    return _ref = {}, _ref[TASK] = true, _ref.isRunning = function isRunning() {
        return running;
    }, _ref.result = function result() {
        return _result;
    }, _ref.error = function error() {
        return _error;
    }, _ref.setRunning = function setRunning(b) {
        return running = b;
    }, _ref.setResult = function setResult(r) {
        return _result = r;
    }, _ref.setError = function setError(e) {
        return _error = e;
    }, _ref;
}
function autoInc() {
    var seed = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;
    return function() {
        return ++seed;
    };
}
var uid = autoInc();
var kThrow = function kThrow2(err) {
    throw err;
};
var kReturn = function kReturn2(value) {
    return {
        value,
        done: true
    };
};
function makeIterator(next) {
    var thro = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : kThrow;
    var name = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "";
    var isHelper = arguments[3];
    var iterator2 = {
        name,
        next,
        throw: thro,
        return: kReturn
    };
    if (isHelper) {
        iterator2[HELPER] = true;
    }
    if (typeof Symbol !== "undefined") {
        iterator2[Symbol.iterator] = function() {
            return iterator2;
        };
    }
    return iterator2;
}
function log(level, message) {
    var error = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "";
    if (typeof window === "undefined") {
        console.log("redux-saga " + level + ": " + message + "\n" + (error && error.stack || error));
    } else {
        console[level](message, error);
    }
}
function deprecate(fn, deprecationWarning3) {
    return function() {
        if (true) log("warn", deprecationWarning3);
        return fn.apply(void 0, arguments);
    };
}
var updateIncentive = function updateIncentive2(deprecated, preferred) {
    return deprecated + " has been deprecated in favor of " + preferred + ", please update your code";
};
var internalErr = function internalErr2(err) {
    return new Error("\n  redux-saga: Error checking hooks detected an inconsistent state. This is likely a bug\n  in redux-saga code and not yours. Thanks for reporting this in the project's github repo.\n  Error: " + err + "\n");
};
var createSetContextWarning = function createSetContextWarning2(ctx, props) {
    return (ctx ? ctx + "." : "") + "setContext(props): argument " + props + " is not a plain object";
};
var wrapSagaDispatch = function wrapSagaDispatch2(dispatch) {
    return function(action) {
        return dispatch(Object.defineProperty(action, SAGA_ACTION, {
            value: true
        }));
    };
};
var cloneableGenerator = function cloneableGenerator2(generatorFunc) {
    return function() {
        for(var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++){
            args[_key] = arguments[_key];
        }
        var history = [];
        var gen = generatorFunc.apply(void 0, args);
        return {
            next: function next(arg) {
                history.push(arg);
                return gen.next(arg);
            },
            clone: function clone() {
                var clonedGen = cloneableGenerator2(generatorFunc).apply(void 0, args);
                history.forEach(function(arg) {
                    return clonedGen.next(arg);
                });
                return clonedGen;
            },
            return: function _return(value) {
                return gen.return(value);
            },
            throw: function _throw(exception) {
                return gen.throw(exception);
            }
        };
    };
};
// node_modules/.pnpm/redux-saga@0.16.2/node_modules/redux-saga/es/internal/buffers.js
var BUFFER_OVERFLOW = "Channel's Buffer overflow!";
var ON_OVERFLOW_THROW = 1;
var ON_OVERFLOW_DROP = 2;
var ON_OVERFLOW_SLIDE = 3;
var ON_OVERFLOW_EXPAND = 4;
var zeroBuffer = {
    isEmpty: kTrue,
    put: noop,
    take: noop
};
function ringBuffer() {
    var limit = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 10;
    var overflowAction = arguments[1];
    var arr = new Array(limit);
    var length = 0;
    var pushIndex = 0;
    var popIndex = 0;
    var push = function push2(it) {
        arr[pushIndex] = it;
        pushIndex = (pushIndex + 1) % limit;
        length++;
    };
    var take2 = function take3() {
        if (length != 0) {
            var it = arr[popIndex];
            arr[popIndex] = null;
            length--;
            popIndex = (popIndex + 1) % limit;
            return it;
        }
    };
    var flush3 = function flush4() {
        var items = [];
        while(length){
            items.push(take2());
        }
        return items;
    };
    return {
        isEmpty: function isEmpty() {
            return length == 0;
        },
        put: function put2(it) {
            if (length < limit) {
                push(it);
            } else {
                var doubledLimit = void 0;
                switch(overflowAction){
                    case ON_OVERFLOW_THROW:
                        throw new Error(BUFFER_OVERFLOW);
                    case ON_OVERFLOW_SLIDE:
                        arr[pushIndex] = it;
                        pushIndex = (pushIndex + 1) % limit;
                        popIndex = pushIndex;
                        break;
                    case ON_OVERFLOW_EXPAND:
                        doubledLimit = 2 * limit;
                        arr = flush3();
                        length = arr.length;
                        pushIndex = arr.length;
                        popIndex = 0;
                        arr.length = doubledLimit;
                        limit = doubledLimit;
                        push(it);
                        break;
                    default:
                }
            }
        },
        take: take2,
        flush: flush3
    };
}
var buffers = {
    none: function none() {
        return zeroBuffer;
    },
    fixed: function fixed(limit) {
        return ringBuffer(limit, ON_OVERFLOW_THROW);
    },
    dropping: function dropping(limit) {
        return ringBuffer(limit, ON_OVERFLOW_DROP);
    },
    sliding: function sliding(limit) {
        return ringBuffer(limit, ON_OVERFLOW_SLIDE);
    },
    expanding: function expanding(initialSize) {
        return ringBuffer(initialSize, ON_OVERFLOW_EXPAND);
    }
};
// node_modules/.pnpm/redux-saga@0.16.2/node_modules/redux-saga/es/internal/scheduler.js
var queue = [];
var semaphore = 0;
function exec(task2) {
    try {
        suspend();
        task2();
    } finally{
        release();
    }
}
function asap(task2) {
    queue.push(task2);
    if (!semaphore) {
        suspend();
        flush();
    }
}
function suspend() {
    semaphore++;
}
function release() {
    semaphore--;
}
function flush() {
    release();
    var task2 = void 0;
    while(!semaphore && (task2 = queue.shift()) !== void 0){
        exec(task2);
    }
}
// node_modules/.pnpm/redux-saga@0.16.2/node_modules/redux-saga/es/internal/channel.js
var _extends2 = Object.assign || function(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i];
        for(var key in source){
            if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
            }
        }
    }
    return target;
};
var CHANNEL_END_TYPE = "@@redux-saga/CHANNEL_END";
var END = {
    type: CHANNEL_END_TYPE
};
var isEnd = function isEnd2(a) {
    return a && a.type === CHANNEL_END_TYPE;
};
function emitter() {
    var subscribers = [];
    function subscribe(sub) {
        subscribers.push(sub);
        return function() {
            return remove(subscribers, sub);
        };
    }
    function emit(item) {
        var arr = subscribers.slice();
        for(var i = 0, len = arr.length; i < len; i++){
            arr[i](item);
        }
    }
    return {
        subscribe,
        emit
    };
}
var INVALID_BUFFER = "invalid buffer passed to channel factory function";
var UNDEFINED_INPUT_ERROR = "Saga was provided with an undefined action";
if (true) {
    UNDEFINED_INPUT_ERROR += "\nHints:\n    - check that your Action Creator returns a non-undefined value\n    - if the Saga was started using runSaga, check that your subscribe source provides the action to its listeners\n  ";
}
function channel2() {
    var buffer2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : buffers.fixed();
    var closed = false;
    var takers = [];
    check(buffer2, is.buffer, INVALID_BUFFER);
    function checkForbiddenStates() {
        if (closed && takers.length) {
            throw internalErr("Cannot have a closed channel with pending takers");
        }
        if (takers.length && !buffer2.isEmpty()) {
            throw internalErr("Cannot have pending takers with non empty buffer");
        }
    }
    function put2(input) {
        checkForbiddenStates();
        check(input, is.notUndef, UNDEFINED_INPUT_ERROR);
        if (closed) {
            return;
        }
        if (!takers.length) {
            return buffer2.put(input);
        }
        for(var i = 0; i < takers.length; i++){
            var cb = takers[i];
            if (!cb[MATCH] || cb[MATCH](input)) {
                takers.splice(i, 1);
                return cb(input);
            }
        }
    }
    function take2(cb) {
        checkForbiddenStates();
        check(cb, is.func, "channel.take's callback must be a function");
        if (closed && buffer2.isEmpty()) {
            cb(END);
        } else if (!buffer2.isEmpty()) {
            cb(buffer2.take());
        } else {
            takers.push(cb);
            cb.cancel = function() {
                return remove(takers, cb);
            };
        }
    }
    function flush3(cb) {
        checkForbiddenStates();
        check(cb, is.func, "channel.flush' callback must be a function");
        if (closed && buffer2.isEmpty()) {
            cb(END);
            return;
        }
        cb(buffer2.flush());
    }
    function close() {
        checkForbiddenStates();
        if (!closed) {
            closed = true;
            if (takers.length) {
                var arr = takers;
                takers = [];
                for(var i = 0, len = arr.length; i < len; i++){
                    arr[i](END);
                }
            }
        }
    }
    return {
        take: take2,
        put: put2,
        flush: flush3,
        close,
        get __takers__ () {
            return takers;
        },
        get __closed__ () {
            return closed;
        }
    };
}
function eventChannel(subscribe) {
    var buffer2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : buffers.none();
    var matcher2 = arguments[2];
    if (arguments.length > 2) {
        check(matcher2, is.func, "Invalid match function passed to eventChannel");
    }
    var chan = channel2(buffer2);
    var close = function close2() {
        if (!chan.__closed__) {
            if (unsubscribe) {
                unsubscribe();
            }
            chan.close();
        }
    };
    var unsubscribe = subscribe(function(input) {
        if (isEnd(input)) {
            close();
            return;
        }
        if (matcher2 && !matcher2(input)) {
            return;
        }
        chan.put(input);
    });
    if (chan.__closed__) {
        unsubscribe();
    }
    if (!is.func(unsubscribe)) {
        throw new Error("in eventChannel: subscribe should return a function to unsubscribe");
    }
    return {
        take: chan.take,
        flush: chan.flush,
        close
    };
}
function stdChannel(subscribe) {
    var chan = eventChannel(function(cb) {
        return subscribe(function(input) {
            if (input[SAGA_ACTION]) {
                cb(input);
                return;
            }
            asap(function() {
                return cb(input);
            });
        });
    });
    return _extends2({}, chan, {
        take: function take2(cb, matcher2) {
            if (arguments.length > 1) {
                check(matcher2, is.func, "channel.take's matcher argument must be a function");
                cb[MATCH] = matcher2;
            }
            chan.take(cb);
        }
    });
}
// node_modules/.pnpm/redux-saga@0.16.2/node_modules/redux-saga/es/internal/io.js
var IO = sym("IO");
var TAKE = "TAKE";
var PUT = "PUT";
var ALL = "ALL";
var RACE = "RACE";
var CALL = "CALL";
var CPS = "CPS";
var FORK = "FORK";
var JOIN = "JOIN";
var CANCEL2 = "CANCEL";
var SELECT = "SELECT";
var ACTION_CHANNEL = "ACTION_CHANNEL";
var CANCELLED = "CANCELLED";
var FLUSH = "FLUSH";
var GET_CONTEXT = "GET_CONTEXT";
var SET_CONTEXT = "SET_CONTEXT";
var TEST_HINT = "\n(HINT: if you are getting this errors in tests, consider using createMockTask from redux-saga/utils)";
var effect = function effect2(type, payload) {
    var _ref;
    return _ref = {}, _ref[IO] = true, _ref[type] = payload, _ref;
};
var detach = function detach2(eff) {
    check(asEffect.fork(eff), is.object, "detach(eff): argument must be a fork effect");
    eff[FORK].detached = true;
    return eff;
};
function take() {
    var patternOrChannel = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "*";
    if (arguments.length) {
        check(arguments[0], is.notUndef, "take(patternOrChannel): patternOrChannel is undefined");
    }
    if (is.pattern(patternOrChannel)) {
        return effect(TAKE, {
            pattern: patternOrChannel
        });
    }
    if (is.channel(patternOrChannel)) {
        return effect(TAKE, {
            channel: patternOrChannel
        });
    }
    throw new Error("take(patternOrChannel): argument " + String(patternOrChannel) + " is not valid channel or a valid pattern");
}
take.maybe = function() {
    var eff = take.apply(void 0, arguments);
    eff[TAKE].maybe = true;
    return eff;
};
var takem = deprecate(take.maybe, updateIncentive("takem", "take.maybe"));
function put(channel3, action) {
    if (arguments.length > 1) {
        check(channel3, is.notUndef, "put(channel, action): argument channel is undefined");
        check(channel3, is.channel, "put(channel, action): argument " + channel3 + " is not a valid channel");
        check(action, is.notUndef, "put(channel, action): argument action is undefined");
    } else {
        check(channel3, is.notUndef, "put(action): argument action is undefined");
        action = channel3;
        channel3 = null;
    }
    return effect(PUT, {
        channel: channel3,
        action
    });
}
put.resolve = function() {
    var eff = put.apply(void 0, arguments);
    eff[PUT].resolve = true;
    return eff;
};
put.sync = deprecate(put.resolve, updateIncentive("put.sync", "put.resolve"));
function all(effects) {
    return effect(ALL, effects);
}
function race(effects) {
    return effect(RACE, effects);
}
function getFnCallDesc(meth, fn, args) {
    check(fn, is.notUndef, meth + ": argument fn is undefined");
    var context = null;
    if (is.array(fn)) {
        var _fn = fn;
        context = _fn[0];
        fn = _fn[1];
    } else if (fn.fn) {
        var _fn2 = fn;
        context = _fn2.context;
        fn = _fn2.fn;
    }
    if (context && is.string(fn) && is.func(context[fn])) {
        fn = context[fn];
    }
    check(fn, is.func, meth + ": argument " + fn + " is not a function");
    return {
        context,
        fn,
        args
    };
}
function call(fn) {
    for(var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){
        args[_key - 1] = arguments[_key];
    }
    return effect(CALL, getFnCallDesc("call", fn, args));
}
function apply(context, fn) {
    var args = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [];
    return effect(CALL, getFnCallDesc("apply", {
        context,
        fn
    }, args));
}
function cps(fn) {
    for(var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++){
        args[_key2 - 1] = arguments[_key2];
    }
    return effect(CPS, getFnCallDesc("cps", fn, args));
}
function fork(fn) {
    for(var _len3 = arguments.length, args = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++){
        args[_key3 - 1] = arguments[_key3];
    }
    return effect(FORK, getFnCallDesc("fork", fn, args));
}
function spawn(fn) {
    for(var _len4 = arguments.length, args = Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++){
        args[_key4 - 1] = arguments[_key4];
    }
    return detach(fork.apply(void 0, [
        fn
    ].concat(args)));
}
function join() {
    for(var _len5 = arguments.length, tasks = Array(_len5), _key5 = 0; _key5 < _len5; _key5++){
        tasks[_key5] = arguments[_key5];
    }
    if (tasks.length > 1) {
        return all(tasks.map(function(t) {
            return join(t);
        }));
    }
    var task2 = tasks[0];
    check(task2, is.notUndef, "join(task): argument task is undefined");
    check(task2, is.task, "join(task): argument " + task2 + " is not a valid Task object " + TEST_HINT);
    return effect(JOIN, task2);
}
function cancel() {
    for(var _len6 = arguments.length, tasks = Array(_len6), _key6 = 0; _key6 < _len6; _key6++){
        tasks[_key6] = arguments[_key6];
    }
    if (tasks.length > 1) {
        return all(tasks.map(function(t) {
            return cancel(t);
        }));
    }
    var task2 = tasks[0];
    if (tasks.length === 1) {
        check(task2, is.notUndef, "cancel(task): argument task is undefined");
        check(task2, is.task, "cancel(task): argument " + task2 + " is not a valid Task object " + TEST_HINT);
    }
    return effect(CANCEL2, task2 || SELF_CANCELLATION);
}
function select(selector) {
    for(var _len7 = arguments.length, args = Array(_len7 > 1 ? _len7 - 1 : 0), _key7 = 1; _key7 < _len7; _key7++){
        args[_key7 - 1] = arguments[_key7];
    }
    if (arguments.length === 0) {
        selector = ident;
    } else {
        check(selector, is.notUndef, "select(selector,[...]): argument selector is undefined");
        check(selector, is.func, "select(selector,[...]): argument " + selector + " is not a function");
    }
    return effect(SELECT, {
        selector,
        args
    });
}
function actionChannel(pattern2, buffer2) {
    check(pattern2, is.notUndef, "actionChannel(pattern,...): argument pattern is undefined");
    if (arguments.length > 1) {
        check(buffer2, is.notUndef, "actionChannel(pattern, buffer): argument buffer is undefined");
        check(buffer2, is.buffer, "actionChannel(pattern, buffer): argument " + buffer2 + " is not a valid buffer");
    }
    return effect(ACTION_CHANNEL, {
        pattern: pattern2,
        buffer: buffer2
    });
}
function cancelled() {
    return effect(CANCELLED, {});
}
function flush2(channel3) {
    check(channel3, is.channel, "flush(channel): argument " + channel3 + " is not valid channel");
    return effect(FLUSH, channel3);
}
function getContext(prop) {
    check(prop, is.string, "getContext(prop): argument " + prop + " is not a string");
    return effect(GET_CONTEXT, prop);
}
function setContext(props) {
    check(props, is.object, createSetContextWarning(null, props));
    return effect(SET_CONTEXT, props);
}
var createAsEffectType = function createAsEffectType2(type) {
    return function(effect3) {
        return effect3 && effect3[IO] && effect3[type];
    };
};
var asEffect = {
    take: createAsEffectType(TAKE),
    put: createAsEffectType(PUT),
    all: createAsEffectType(ALL),
    race: createAsEffectType(RACE),
    call: createAsEffectType(CALL),
    cps: createAsEffectType(CPS),
    fork: createAsEffectType(FORK),
    join: createAsEffectType(JOIN),
    cancel: createAsEffectType(CANCEL2),
    select: createAsEffectType(SELECT),
    actionChannel: createAsEffectType(ACTION_CHANNEL),
    cancelled: createAsEffectType(CANCELLED),
    flush: createAsEffectType(FLUSH),
    getContext: createAsEffectType(GET_CONTEXT),
    setContext: createAsEffectType(SET_CONTEXT)
};
// node_modules/.pnpm/redux-saga@0.16.2/node_modules/redux-saga/es/internal/proc.js
var _extends3 = Object.assign || function(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i];
        for(var key in source){
            if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
            }
        }
    }
    return target;
};
var _typeof3 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
    return typeof obj;
} : function(obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};
function _defineEnumerableProperties(obj, descs) {
    for(var key in descs){
        var desc = descs[key];
        desc.configurable = desc.enumerable = true;
        if ("value" in desc) desc.writable = true;
        Object.defineProperty(obj, key, desc);
    }
    return obj;
}
var NOT_ITERATOR_ERROR = "proc first argument (Saga function result) must be an iterator";
var CHANNEL_END = {
    toString: function toString() {
        return "@@redux-saga/CHANNEL_END";
    }
};
var TASK_CANCEL = {
    toString: function toString2() {
        return "@@redux-saga/TASK_CANCEL";
    }
};
var matchers = {
    wildcard: function wildcard() {
        return kTrue;
    },
    default: function _default(pattern2) {
        return (typeof pattern2 === "undefined" ? "undefined" : _typeof3(pattern2)) === "symbol" ? function(input) {
            return input.type === pattern2;
        } : function(input) {
            return input.type === String(pattern2);
        };
    },
    array: function array2(patterns) {
        return function(input) {
            return patterns.some(function(p) {
                return matcher(p)(input);
            });
        };
    },
    predicate: function predicate(_predicate) {
        return function(input) {
            return _predicate(input);
        };
    }
};
function matcher(pattern2) {
    return (pattern2 === "*" ? matchers.wildcard : is.array(pattern2) ? matchers.array : is.stringableFunc(pattern2) ? matchers.default : is.func(pattern2) ? matchers.predicate : matchers.default)(pattern2);
}
function forkQueue(name, mainTask, cb) {
    var tasks = [], result = void 0, completed = false;
    addTask(mainTask);
    function abort(err) {
        cancelAll();
        cb(err, true);
    }
    function addTask(task2) {
        tasks.push(task2);
        task2.cont = function(res, isErr) {
            if (completed) {
                return;
            }
            remove(tasks, task2);
            task2.cont = noop;
            if (isErr) {
                abort(res);
            } else {
                if (task2 === mainTask) {
                    result = res;
                }
                if (!tasks.length) {
                    completed = true;
                    cb(result);
                }
            }
        };
    }
    function cancelAll() {
        if (completed) {
            return;
        }
        completed = true;
        tasks.forEach(function(t) {
            t.cont = noop;
            t.cancel();
        });
        tasks = [];
    }
    return {
        addTask,
        cancelAll,
        abort,
        getTasks: function getTasks() {
            return tasks;
        },
        taskNames: function taskNames() {
            return tasks.map(function(t) {
                return t.name;
            });
        }
    };
}
function createTaskIterator(_ref) {
    var context = _ref.context, fn = _ref.fn, args = _ref.args;
    if (is.iterator(fn)) {
        return fn;
    }
    var result = void 0, error = void 0;
    try {
        result = fn.apply(context, args);
    } catch (err) {
        error = err;
    }
    if (is.iterator(result)) {
        return result;
    }
    return error ? makeIterator(function() {
        throw error;
    }) : makeIterator(function() {
        var pc = void 0;
        var eff = {
            done: false,
            value: result
        };
        var ret = function ret2(value) {
            return {
                done: true,
                value
            };
        };
        return function(arg) {
            if (!pc) {
                pc = true;
                return eff;
            } else {
                return ret(arg);
            }
        };
    }());
}
var wrapHelper = function wrapHelper2(helper2) {
    return {
        fn: helper2
    };
};
function proc(iterator2) {
    var subscribe = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : function() {
        return noop;
    };
    var dispatch = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : noop;
    var getState = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : noop;
    var parentContext = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : {};
    var options = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : {};
    var parentEffectId = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : 0;
    var name = arguments.length > 7 && arguments[7] !== void 0 ? arguments[7] : "anonymous";
    var cont = arguments[8];
    check(iterator2, is.iterator, NOT_ITERATOR_ERROR);
    var effectsString = "[...effects]";
    var runParallelEffect = deprecate(runAllEffect, updateIncentive(effectsString, "all(" + effectsString + ")"));
    var sagaMonitor = options.sagaMonitor, logger = options.logger, onError = options.onError;
    var log2 = logger || log;
    var logError = function logError2(err) {
        var message = err.sagaStack;
        if (!message && err.stack) {
            message = err.stack.split("\n")[0].indexOf(err.message) !== -1 ? err.stack : "Error: " + err.message + "\n" + err.stack;
        }
        log2("error", "uncaught at " + name, message || err.message || err);
    };
    var stdChannel2 = stdChannel(subscribe);
    var taskContext = Object.create(parentContext);
    next.cancel = noop;
    var task2 = newTask(parentEffectId, name, iterator2, cont);
    var mainTask = {
        name,
        cancel: cancelMain,
        isRunning: true
    };
    var taskQueue = forkQueue(name, mainTask, end);
    function cancelMain() {
        if (mainTask.isRunning && !mainTask.isCancelled) {
            mainTask.isCancelled = true;
            next(TASK_CANCEL);
        }
    }
    function cancel2() {
        if (iterator2._isRunning && !iterator2._isCancelled) {
            iterator2._isCancelled = true;
            taskQueue.cancelAll();
            end(TASK_CANCEL);
        }
    }
    cont && (cont.cancel = cancel2);
    iterator2._isRunning = true;
    next();
    return task2;
    function next(arg, isErr) {
        if (!mainTask.isRunning) {
            throw new Error("Trying to resume an already finished generator");
        }
        try {
            var result = void 0;
            if (isErr) {
                result = iterator2.throw(arg);
            } else if (arg === TASK_CANCEL) {
                mainTask.isCancelled = true;
                next.cancel();
                result = is.func(iterator2.return) ? iterator2.return(TASK_CANCEL) : {
                    done: true,
                    value: TASK_CANCEL
                };
            } else if (arg === CHANNEL_END) {
                result = is.func(iterator2.return) ? iterator2.return() : {
                    done: true
                };
            } else {
                result = iterator2.next(arg);
            }
            if (!result.done) {
                runEffect(result.value, parentEffectId, "", next);
            } else {
                mainTask.isMainRunning = false;
                mainTask.cont && mainTask.cont(result.value);
            }
        } catch (error) {
            if (mainTask.isCancelled) {
                logError(error);
            }
            mainTask.isMainRunning = false;
            mainTask.cont(error, true);
        }
    }
    function end(result, isErr) {
        iterator2._isRunning = false;
        stdChannel2.close();
        if (!isErr) {
            iterator2._result = result;
            iterator2._deferredEnd && iterator2._deferredEnd.resolve(result);
        } else {
            if (result instanceof Error) {
                Object.defineProperty(result, "sagaStack", {
                    value: "at " + name + " \n " + (result.sagaStack || result.stack),
                    configurable: true
                });
            }
            if (!task2.cont) {
                if (result instanceof Error && onError) {
                    onError(result);
                } else {
                    logError(result);
                }
            }
            iterator2._error = result;
            iterator2._isAborted = true;
            iterator2._deferredEnd && iterator2._deferredEnd.reject(result);
        }
        task2.cont && task2.cont(result, isErr);
        task2.joiners.forEach(function(j) {
            return j.cb(result, isErr);
        });
        task2.joiners = null;
    }
    function runEffect(effect3, parentEffectId2) {
        var label = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "";
        var cb = arguments[3];
        var effectId = uid();
        sagaMonitor && sagaMonitor.effectTriggered({
            effectId,
            parentEffectId: parentEffectId2,
            label,
            effect: effect3
        });
        var effectSettled = void 0;
        function currCb(res, isErr) {
            if (effectSettled) {
                return;
            }
            effectSettled = true;
            cb.cancel = noop;
            if (sagaMonitor) {
                isErr ? sagaMonitor.effectRejected(effectId, res) : sagaMonitor.effectResolved(effectId, res);
            }
            cb(res, isErr);
        }
        currCb.cancel = noop;
        cb.cancel = function() {
            if (effectSettled) {
                return;
            }
            effectSettled = true;
            try {
                currCb.cancel();
            } catch (err) {
                logError(err);
            }
            currCb.cancel = noop;
            sagaMonitor && sagaMonitor.effectCancelled(effectId);
        };
        var data = void 0;
        return is.promise(effect3) ? resolvePromise(effect3, currCb) : is.helper(effect3) ? runForkEffect(wrapHelper(effect3), effectId, currCb) : is.iterator(effect3) ? resolveIterator(effect3, effectId, name, currCb) : is.array(effect3) ? runParallelEffect(effect3, effectId, currCb) : (data = asEffect.take(effect3)) ? runTakeEffect(data, currCb) : (data = asEffect.put(effect3)) ? runPutEffect(data, currCb) : (data = asEffect.all(effect3)) ? runAllEffect(data, effectId, currCb) : (data = asEffect.race(effect3)) ? runRaceEffect(data, effectId, currCb) : (data = asEffect.call(effect3)) ? runCallEffect(data, effectId, currCb) : (data = asEffect.cps(effect3)) ? runCPSEffect(data, currCb) : (data = asEffect.fork(effect3)) ? runForkEffect(data, effectId, currCb) : (data = asEffect.join(effect3)) ? runJoinEffect(data, currCb) : (data = asEffect.cancel(effect3)) ? runCancelEffect(data, currCb) : (data = asEffect.select(effect3)) ? runSelectEffect(data, currCb) : (data = asEffect.actionChannel(effect3)) ? runChannelEffect(data, currCb) : (data = asEffect.flush(effect3)) ? runFlushEffect(data, currCb) : (data = asEffect.cancelled(effect3)) ? runCancelledEffect(data, currCb) : (data = asEffect.getContext(effect3)) ? runGetContextEffect(data, currCb) : (data = asEffect.setContext(effect3)) ? runSetContextEffect(data, currCb) : currCb(effect3);
    }
    function resolvePromise(promise2, cb) {
        var cancelPromise = promise2[CANCEL];
        if (is.func(cancelPromise)) {
            cb.cancel = cancelPromise;
        } else if (is.func(promise2.abort)) {
            cb.cancel = function() {
                return promise2.abort();
            };
        }
        promise2.then(cb, function(error) {
            return cb(error, true);
        });
    }
    function resolveIterator(iterator3, effectId, name2, cb) {
        proc(iterator3, subscribe, dispatch, getState, taskContext, options, effectId, name2, cb);
    }
    function runTakeEffect(_ref2, cb) {
        var channel3 = _ref2.channel, pattern2 = _ref2.pattern, maybe = _ref2.maybe;
        channel3 = channel3 || stdChannel2;
        var takeCb = function takeCb2(inp) {
            return inp instanceof Error ? cb(inp, true) : isEnd(inp) && !maybe ? cb(CHANNEL_END) : cb(inp);
        };
        try {
            channel3.take(takeCb, matcher(pattern2));
        } catch (err) {
            return cb(err, true);
        }
        cb.cancel = takeCb.cancel;
    }
    function runPutEffect(_ref3, cb) {
        var channel3 = _ref3.channel, action = _ref3.action, resolve = _ref3.resolve;
        asap(function() {
            var result = void 0;
            try {
                result = (channel3 ? channel3.put : dispatch)(action);
            } catch (error) {
                if (channel3 || resolve) return cb(error, true);
                logError(error);
            }
            if (resolve && is.promise(result)) {
                resolvePromise(result, cb);
            } else {
                return cb(result);
            }
        });
    }
    function runCallEffect(_ref4, effectId, cb) {
        var context = _ref4.context, fn = _ref4.fn, args = _ref4.args;
        var result = void 0;
        try {
            result = fn.apply(context, args);
        } catch (error) {
            return cb(error, true);
        }
        return is.promise(result) ? resolvePromise(result, cb) : is.iterator(result) ? resolveIterator(result, effectId, fn.name, cb) : cb(result);
    }
    function runCPSEffect(_ref5, cb) {
        var context = _ref5.context, fn = _ref5.fn, args = _ref5.args;
        try {
            var cpsCb = function cpsCb2(err, res) {
                return is.undef(err) ? cb(res) : cb(err, true);
            };
            fn.apply(context, args.concat(cpsCb));
            if (cpsCb.cancel) {
                cb.cancel = function() {
                    return cpsCb.cancel();
                };
            }
        } catch (error) {
            return cb(error, true);
        }
    }
    function runForkEffect(_ref6, effectId, cb) {
        var context = _ref6.context, fn = _ref6.fn, args = _ref6.args, detached = _ref6.detached;
        var taskIterator = createTaskIterator({
            context,
            fn,
            args
        });
        try {
            suspend();
            var _task = proc(taskIterator, subscribe, dispatch, getState, taskContext, options, effectId, fn.name, detached ? null : noop);
            if (detached) {
                cb(_task);
            } else {
                if (taskIterator._isRunning) {
                    taskQueue.addTask(_task);
                    cb(_task);
                } else if (taskIterator._error) {
                    taskQueue.abort(taskIterator._error);
                } else {
                    cb(_task);
                }
            }
        } finally{
            flush();
        }
    }
    function runJoinEffect(t, cb) {
        if (t.isRunning()) {
            var joiner = {
                task: task2,
                cb
            };
            cb.cancel = function() {
                return remove(t.joiners, joiner);
            };
            t.joiners.push(joiner);
        } else {
            t.isAborted() ? cb(t.error(), true) : cb(t.result());
        }
    }
    function runCancelEffect(taskToCancel, cb) {
        if (taskToCancel === SELF_CANCELLATION) {
            taskToCancel = task2;
        }
        if (taskToCancel.isRunning()) {
            taskToCancel.cancel();
        }
        cb();
    }
    function runAllEffect(effects, effectId, cb) {
        var keys = Object.keys(effects);
        if (!keys.length) {
            return cb(is.array(effects) ? [] : {});
        }
        var completedCount = 0;
        var completed = void 0;
        var results = {};
        var childCbs = {};
        function checkEffectEnd() {
            if (completedCount === keys.length) {
                completed = true;
                cb(is.array(effects) ? array.from(_extends3({}, results, {
                    length: keys.length
                })) : results);
            }
        }
        keys.forEach(function(key) {
            var chCbAtKey = function chCbAtKey2(res, isErr) {
                if (completed) {
                    return;
                }
                if (isErr || isEnd(res) || res === CHANNEL_END || res === TASK_CANCEL) {
                    cb.cancel();
                    cb(res, isErr);
                } else {
                    results[key] = res;
                    completedCount++;
                    checkEffectEnd();
                }
            };
            chCbAtKey.cancel = noop;
            childCbs[key] = chCbAtKey;
        });
        cb.cancel = function() {
            if (!completed) {
                completed = true;
                keys.forEach(function(key) {
                    return childCbs[key].cancel();
                });
            }
        };
        keys.forEach(function(key) {
            return runEffect(effects[key], effectId, key, childCbs[key]);
        });
    }
    function runRaceEffect(effects, effectId, cb) {
        var completed = void 0;
        var keys = Object.keys(effects);
        var childCbs = {};
        keys.forEach(function(key) {
            var chCbAtKey = function chCbAtKey2(res, isErr) {
                if (completed) {
                    return;
                }
                if (isErr) {
                    cb.cancel();
                    cb(res, true);
                } else if (!isEnd(res) && res !== CHANNEL_END && res !== TASK_CANCEL) {
                    var _response;
                    cb.cancel();
                    completed = true;
                    var response = (_response = {}, _response[key] = res, _response);
                    cb(is.array(effects) ? [].slice.call(_extends3({}, response, {
                        length: keys.length
                    })) : response);
                }
            };
            chCbAtKey.cancel = noop;
            childCbs[key] = chCbAtKey;
        });
        cb.cancel = function() {
            if (!completed) {
                completed = true;
                keys.forEach(function(key) {
                    return childCbs[key].cancel();
                });
            }
        };
        keys.forEach(function(key) {
            if (completed) {
                return;
            }
            runEffect(effects[key], effectId, key, childCbs[key]);
        });
    }
    function runSelectEffect(_ref7, cb) {
        var selector = _ref7.selector, args = _ref7.args;
        try {
            var state = selector.apply(void 0, [
                getState()
            ].concat(args));
            cb(state);
        } catch (error) {
            cb(error, true);
        }
    }
    function runChannelEffect(_ref8, cb) {
        var pattern2 = _ref8.pattern, buffer2 = _ref8.buffer;
        var match = matcher(pattern2);
        match.pattern = pattern2;
        cb(eventChannel(subscribe, buffer2 || buffers.fixed(), match));
    }
    function runCancelledEffect(data, cb) {
        cb(!!mainTask.isCancelled);
    }
    function runFlushEffect(channel3, cb) {
        channel3.flush(cb);
    }
    function runGetContextEffect(prop, cb) {
        cb(taskContext[prop]);
    }
    function runSetContextEffect(props, cb) {
        object2.assign(taskContext, props);
        cb();
    }
    function newTask(id, name2, iterator3, cont2) {
        var _done, _ref9, _mutatorMap;
        iterator3._deferredEnd = null;
        return _ref9 = {}, _ref9[TASK] = true, _ref9.id = id, _ref9.name = name2, _done = "done", _mutatorMap = {}, _mutatorMap[_done] = _mutatorMap[_done] || {}, _mutatorMap[_done].get = function() {
            if (iterator3._deferredEnd) {
                return iterator3._deferredEnd.promise;
            } else {
                var def = deferred();
                iterator3._deferredEnd = def;
                if (!iterator3._isRunning) {
                    iterator3._error ? def.reject(iterator3._error) : def.resolve(iterator3._result);
                }
                return def.promise;
            }
        }, _ref9.cont = cont2, _ref9.joiners = [], _ref9.cancel = cancel2, _ref9.isRunning = function isRunning() {
            return iterator3._isRunning;
        }, _ref9.isCancelled = function isCancelled() {
            return iterator3._isCancelled;
        }, _ref9.isAborted = function isAborted() {
            return iterator3._isAborted;
        }, _ref9.result = function result() {
            return iterator3._result;
        }, _ref9.error = function error() {
            return iterator3._error;
        }, _ref9.setContext = function setContext2(props) {
            check(props, is.object, createSetContextWarning("task", props));
            object2.assign(taskContext, props);
        }, _defineEnumerableProperties(_ref9, _mutatorMap), _ref9;
    }
}
// node_modules/.pnpm/redux-saga@0.16.2/node_modules/redux-saga/es/internal/runSaga.js
var RUN_SAGA_SIGNATURE = "runSaga(storeInterface, saga, ...args)";
var NON_GENERATOR_ERR = RUN_SAGA_SIGNATURE + ": saga argument must be a Generator function!";
function runSaga(storeInterface, saga) {
    for(var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++){
        args[_key - 2] = arguments[_key];
    }
    var iterator2 = void 0;
    if (is.iterator(storeInterface)) {
        if (true) {
            log("warn", "runSaga(iterator, storeInterface) has been deprecated in favor of " + RUN_SAGA_SIGNATURE);
        }
        iterator2 = storeInterface;
        storeInterface = saga;
    } else {
        check(saga, is.func, NON_GENERATOR_ERR);
        iterator2 = saga.apply(void 0, args);
        check(iterator2, is.iterator, NON_GENERATOR_ERR);
    }
    var _storeInterface = storeInterface, subscribe = _storeInterface.subscribe, dispatch = _storeInterface.dispatch, getState = _storeInterface.getState, context = _storeInterface.context, sagaMonitor = _storeInterface.sagaMonitor, logger = _storeInterface.logger, onError = _storeInterface.onError;
    var effectId = uid();
    if (sagaMonitor) {
        sagaMonitor.effectTriggered = sagaMonitor.effectTriggered || noop;
        sagaMonitor.effectResolved = sagaMonitor.effectResolved || noop;
        sagaMonitor.effectRejected = sagaMonitor.effectRejected || noop;
        sagaMonitor.effectCancelled = sagaMonitor.effectCancelled || noop;
        sagaMonitor.actionDispatched = sagaMonitor.actionDispatched || noop;
        sagaMonitor.effectTriggered({
            effectId,
            root: true,
            parentEffectId: 0,
            effect: {
                root: true,
                saga,
                args
            }
        });
    }
    var task2 = proc(iterator2, subscribe, wrapSagaDispatch(dispatch), getState, context, {
        sagaMonitor,
        logger,
        onError
    }, effectId, saga.name);
    if (sagaMonitor) {
        sagaMonitor.effectResolved(effectId, task2);
    }
    return task2;
}
// node_modules/.pnpm/redux-saga@0.16.2/node_modules/redux-saga/es/internal/middleware.js
function _objectWithoutProperties(obj, keys) {
    var target = {};
    for(var i in obj){
        if (keys.indexOf(i) >= 0) continue;
        if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
        target[i] = obj[i];
    }
    return target;
}
function sagaMiddlewareFactory() {
    var _ref = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    var _ref$context = _ref.context, context = _ref$context === void 0 ? {} : _ref$context, options = _objectWithoutProperties(_ref, [
        "context"
    ]);
    var sagaMonitor = options.sagaMonitor, logger = options.logger, onError = options.onError;
    if (is.func(options)) {
        if (false) {} else {
            throw new Error("You passed a function to the Saga middleware. You are likely trying to start a        Saga by directly passing it to the middleware. This is no longer possible starting from 0.10.0.        To run a Saga, you must do it dynamically AFTER mounting the middleware into the store.\n        Example:\n          import createSagaMiddleware from 'redux-saga'\n          ... other imports\n\n          const sagaMiddleware = createSagaMiddleware()\n          const store = createStore(reducer, applyMiddleware(sagaMiddleware))\n          sagaMiddleware.run(saga, ...args)\n      ");
        }
    }
    if (logger && !is.func(logger)) {
        throw new Error("`options.logger` passed to the Saga middleware is not a function!");
    }
    if (options.onerror) {
        throw new Error("`options.onerror` was removed. Use `options.onError` instead.");
    }
    if (onError && !is.func(onError)) {
        throw new Error("`options.onError` passed to the Saga middleware is not a function!");
    }
    if (options.emitter && !is.func(options.emitter)) {
        throw new Error("`options.emitter` passed to the Saga middleware is not a function!");
    }
    function sagaMiddleware(_ref2) {
        var getState = _ref2.getState, dispatch = _ref2.dispatch;
        var sagaEmitter = emitter();
        sagaEmitter.emit = (options.emitter || ident)(sagaEmitter.emit);
        sagaMiddleware.run = runSaga.bind(null, {
            context,
            subscribe: sagaEmitter.subscribe,
            dispatch,
            getState,
            sagaMonitor,
            logger,
            onError
        });
        return function(next) {
            return function(action) {
                if (sagaMonitor && sagaMonitor.actionDispatched) {
                    sagaMonitor.actionDispatched(action);
                }
                var result = next(action);
                sagaEmitter.emit(action);
                return result;
            };
        };
    }
    sagaMiddleware.run = function() {
        throw new Error("Before running a Saga, you must mount the Saga middleware on the Store using applyMiddleware");
    };
    sagaMiddleware.setContext = function(props) {
        check(props, is.object, createSetContextWarning("sagaMiddleware", props));
        object2.assign(context, props);
    };
    return sagaMiddleware;
}
// node_modules/.pnpm/redux-saga@0.16.2/node_modules/redux-saga/es/internal/sagaHelpers/fsmIterator.js
var done = {
    done: true,
    value: void 0
};
var qEnd = {};
function safeName(patternOrChannel) {
    if (is.channel(patternOrChannel)) {
        return "channel";
    } else if (Array.isArray(patternOrChannel)) {
        return String(patternOrChannel.map(function(entry) {
            return String(entry);
        }));
    } else {
        return String(patternOrChannel);
    }
}
function fsmIterator(fsm, q0) {
    var name = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "iterator";
    var updateState = void 0, qNext = q0;
    function next(arg, error) {
        if (qNext === qEnd) {
            return done;
        }
        if (error) {
            qNext = qEnd;
            throw error;
        } else {
            updateState && updateState(arg);
            var _fsm$qNext = fsm[qNext](), q = _fsm$qNext[0], output = _fsm$qNext[1], _updateState = _fsm$qNext[2];
            qNext = q;
            updateState = _updateState;
            return qNext === qEnd ? done : output;
        }
    }
    return makeIterator(next, function(error) {
        return next(null, error);
    }, name, true);
}
// node_modules/.pnpm/redux-saga@0.16.2/node_modules/redux-saga/es/internal/sagaHelpers/takeEvery.js
function takeEvery(patternOrChannel, worker) {
    for(var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++){
        args[_key - 2] = arguments[_key];
    }
    var yTake = {
        done: false,
        value: take(patternOrChannel)
    };
    var yFork = function yFork2(ac) {
        return {
            done: false,
            value: fork.apply(void 0, [
                worker
            ].concat(args, [
                ac
            ]))
        };
    };
    var action = void 0, setAction = function setAction2(ac) {
        return action = ac;
    };
    return fsmIterator({
        q1: function q1() {
            return [
                "q2",
                yTake,
                setAction
            ];
        },
        q2: function q2() {
            return action === END ? [
                qEnd
            ] : [
                "q1",
                yFork(action)
            ];
        }
    }, "q1", "takeEvery(" + safeName(patternOrChannel) + ", " + worker.name + ")");
}
// node_modules/.pnpm/redux-saga@0.16.2/node_modules/redux-saga/es/internal/sagaHelpers/takeLatest.js
function takeLatest(patternOrChannel, worker) {
    for(var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++){
        args[_key - 2] = arguments[_key];
    }
    var yTake = {
        done: false,
        value: take(patternOrChannel)
    };
    var yFork = function yFork2(ac) {
        return {
            done: false,
            value: fork.apply(void 0, [
                worker
            ].concat(args, [
                ac
            ]))
        };
    };
    var yCancel = function yCancel2(task3) {
        return {
            done: false,
            value: cancel(task3)
        };
    };
    var task2 = void 0, action = void 0;
    var setTask = function setTask2(t) {
        return task2 = t;
    };
    var setAction = function setAction2(ac) {
        return action = ac;
    };
    return fsmIterator({
        q1: function q1() {
            return [
                "q2",
                yTake,
                setAction
            ];
        },
        q2: function q2() {
            return action === END ? [
                qEnd
            ] : task2 ? [
                "q3",
                yCancel(task2)
            ] : [
                "q1",
                yFork(action),
                setTask
            ];
        },
        q3: function q3() {
            return [
                "q1",
                yFork(action),
                setTask
            ];
        }
    }, "q1", "takeLatest(" + safeName(patternOrChannel) + ", " + worker.name + ")");
}
// node_modules/.pnpm/redux-saga@0.16.2/node_modules/redux-saga/es/internal/sagaHelpers/throttle.js
function throttle(delayLength, pattern2, worker) {
    for(var _len = arguments.length, args = Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++){
        args[_key - 3] = arguments[_key];
    }
    var action = void 0, channel3 = void 0;
    var yActionChannel = {
        done: false,
        value: actionChannel(pattern2, buffers.sliding(1))
    };
    var yTake = function yTake2() {
        return {
            done: false,
            value: take(channel3)
        };
    };
    var yFork = function yFork2(ac) {
        return {
            done: false,
            value: fork.apply(void 0, [
                worker
            ].concat(args, [
                ac
            ]))
        };
    };
    var yDelay = {
        done: false,
        value: call(delay, delayLength)
    };
    var setAction = function setAction2(ac) {
        return action = ac;
    };
    var setChannel = function setChannel2(ch) {
        return channel3 = ch;
    };
    return fsmIterator({
        q1: function q1() {
            return [
                "q2",
                yActionChannel,
                setChannel
            ];
        },
        q2: function q2() {
            return [
                "q3",
                yTake(),
                setAction
            ];
        },
        q3: function q3() {
            return action === END ? [
                qEnd
            ] : [
                "q4",
                yFork(action)
            ];
        },
        q4: function q4() {
            return [
                "q2",
                yDelay
            ];
        }
    }, "q1", "throttle(" + safeName(pattern2) + ", " + worker.name + ")");
}
// node_modules/.pnpm/redux-saga@0.16.2/node_modules/redux-saga/es/internal/sagaHelpers/index.js
var deprecationWarning = function deprecationWarning2(helperName) {
    return "import { " + helperName + " } from 'redux-saga' has been deprecated in favor of import { " + helperName + " } from 'redux-saga/effects'.\nThe latter will not work with yield*, as helper effects are wrapped automatically for you in fork effect.\nTherefore yield " + helperName + " will return task descriptor to your saga and execute next lines of code.";
};
var takeEvery2 = deprecate(takeEvery, deprecationWarning("takeEvery"));
var takeLatest2 = deprecate(takeLatest, deprecationWarning("takeLatest"));
var throttle2 = deprecate(throttle, deprecationWarning("throttle"));
// node_modules/.pnpm/redux-saga@0.16.2/node_modules/redux-saga/es/effects.js
var effects_exports = {};
(0,_chunk_P7VEE7PG_js__WEBPACK_IMPORTED_MODULE_3__.__export)(effects_exports, {
    actionChannel: ()=>actionChannel,
    all: ()=>all,
    apply: ()=>apply,
    call: ()=>call,
    cancel: ()=>cancel,
    cancelled: ()=>cancelled,
    cps: ()=>cps,
    flush: ()=>flush2,
    fork: ()=>fork,
    getContext: ()=>getContext,
    join: ()=>join,
    put: ()=>put,
    race: ()=>race,
    select: ()=>select,
    setContext: ()=>setContext,
    spawn: ()=>spawn,
    take: ()=>take,
    takeEvery: ()=>takeEvery3,
    takeLatest: ()=>takeLatest3,
    takem: ()=>takem,
    throttle: ()=>throttle3
});
// node_modules/.pnpm/redux-saga@0.16.2/node_modules/redux-saga/es/internal/io-helpers.js
function takeEvery3(patternOrChannel, worker) {
    for(var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++){
        args[_key - 2] = arguments[_key];
    }
    return fork.apply(void 0, [
        takeEvery,
        patternOrChannel,
        worker
    ].concat(args));
}
function takeLatest3(patternOrChannel, worker) {
    for(var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++){
        args[_key2 - 2] = arguments[_key2];
    }
    return fork.apply(void 0, [
        takeLatest,
        patternOrChannel,
        worker
    ].concat(args));
}
function throttle3(ms, pattern2, worker) {
    for(var _len3 = arguments.length, args = Array(_len3 > 3 ? _len3 - 3 : 0), _key3 = 3; _key3 < _len3; _key3++){
        args[_key3 - 3] = arguments[_key3];
    }
    return fork.apply(void 0, [
        throttle,
        ms,
        pattern2,
        worker
    ].concat(args));
}
// node_modules/.pnpm/redux-saga@0.16.2/node_modules/redux-saga/es/utils.js
var utils_exports = {};
(0,_chunk_P7VEE7PG_js__WEBPACK_IMPORTED_MODULE_3__.__export)(utils_exports, {
    CHANNEL_END: ()=>CHANNEL_END,
    SAGA_ACTION: ()=>SAGA_ACTION,
    TASK: ()=>TASK,
    arrayOfDeffered: ()=>arrayOfDeffered,
    asEffect: ()=>asEffect,
    cloneableGenerator: ()=>cloneableGenerator,
    createMockTask: ()=>createMockTask,
    deferred: ()=>deferred,
    is: ()=>is,
    noop: ()=>noop
});
// node_modules/.pnpm/redux-saga@0.16.2/node_modules/redux-saga/es/index.js
var es_default = sagaMiddlewareFactory;
// node_modules/.pnpm/dva-core@2.0.4_redux@4.2.1/node_modules/dva-core/dist/index.esm.js
var import_invariant = (0,_chunk_P7VEE7PG_js__WEBPACK_IMPORTED_MODULE_3__.__toESM)(require_browser());
(0,_chunk_UFJBA2XG_js__WEBPACK_IMPORTED_MODULE_2__.init_typeof)();
var import_is_plain_object = (0,_chunk_P7VEE7PG_js__WEBPACK_IMPORTED_MODULE_3__.__toESM)(require_is_plain_object());
// node_modules/.pnpm/@babel+runtime@7.21.0/node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js
function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
// node_modules/.pnpm/@babel+runtime@7.21.0/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js
function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}
// node_modules/.pnpm/@babel+runtime@7.21.0/node_modules/@babel/runtime/helpers/esm/iterableToArray.js
function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
// node_modules/.pnpm/@babel+runtime@7.21.0/node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js
function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
// node_modules/.pnpm/@babel+runtime@7.21.0/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js
function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
// node_modules/.pnpm/@babel+runtime@7.21.0/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js
function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}
// node_modules/.pnpm/@babel+runtime@7.21.0/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js
function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
}
// node_modules/.pnpm/@babel+runtime@7.21.0/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js
function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
// node_modules/.pnpm/@babel+runtime@7.21.0/node_modules/@babel/runtime/helpers/esm/toArray.js
function _toArray(arr) {
    return _arrayWithHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableRest();
}
// node_modules/.pnpm/dva-core@2.0.4_redux@4.2.1/node_modules/dva-core/dist/index.esm.js
var import_warning = (0,_chunk_P7VEE7PG_js__WEBPACK_IMPORTED_MODULE_3__.__toESM)(require_browser2());
(0,_chunk_VU5FV6F3_js__WEBPACK_IMPORTED_MODULE_0__.init_classCallCheck)();
(0,_chunk_VU5FV6F3_js__WEBPACK_IMPORTED_MODULE_0__.init_createClass)();
var import_flatten = (0,_chunk_P7VEE7PG_js__WEBPACK_IMPORTED_MODULE_3__.__toESM)(require_flatten());
var import_window = (0,_chunk_P7VEE7PG_js__WEBPACK_IMPORTED_MODULE_3__.__toESM)(require_window());
// node_modules/.pnpm/@babel+runtime@7.21.0/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js
function _iterableToArrayLimit(arr, i) {
    var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"];
    if (null != _i) {
        var _s, _e, _x, _r, _arr = [], _n = true, _d = false;
        try {
            if (_x = (_i = _i.call(arr)).next, 0 === i) {
                if (Object(_i) !== _i) return;
                _n = false;
            } else for(; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = true);
        } catch (err) {
            _d = true, _e = err;
        } finally{
            try {
                if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return;
            } finally{
                if (_d) throw _e;
            }
        }
        return _arr;
    }
}
// node_modules/.pnpm/@babel+runtime@7.21.0/node_modules/@babel/runtime/helpers/esm/slicedToArray.js
function _slicedToArray(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}
// node_modules/.pnpm/dva-core@2.0.4_redux@4.2.1/node_modules/dva-core/dist/index.esm.js
var import_regenerator = (0,_chunk_P7VEE7PG_js__WEBPACK_IMPORTED_MODULE_3__.__toESM)((0,_chunk_L5W4WYYH_js__WEBPACK_IMPORTED_MODULE_1__.require_regenerator)());
var isArray = Array.isArray.bind(Array);
var isFunction = function isFunction2(o) {
    return typeof o === "function";
};
var returnSelf = function returnSelf2(m) {
    return m;
};
var noop3 = function noop4() {};
var findIndex = function findIndex2(array3, predicate2) {
    for(var i = 0, length = array3.length; i < length; i += 1){
        if (predicate2(array3[i], i)) return i;
    }
    return -1;
};
var utils = Object.freeze({
    isPlainObject: import_is_plain_object.default,
    isArray,
    isFunction,
    returnSelf,
    noop: noop3,
    findIndex
});
function checkModel(model, existModels) {
    var namespace = model.namespace, reducers = model.reducers, effects = model.effects, subscriptions = model.subscriptions;
    (0, import_invariant.default)(namespace, "[app.model] namespace should be defined");
    (0, import_invariant.default)(typeof namespace === "string", "[app.model] namespace should be string, but got ".concat((0,_chunk_UFJBA2XG_js__WEBPACK_IMPORTED_MODULE_2__._typeof)(namespace)));
    (0, import_invariant.default)(!existModels.some(function(model2) {
        return model2.namespace === namespace;
    }), "[app.model] namespace should be unique");
    if (reducers) {
        (0, import_invariant.default)((0, import_is_plain_object.default)(reducers) || isArray(reducers), "[app.model] reducers should be plain object or array, but got ".concat((0,_chunk_UFJBA2XG_js__WEBPACK_IMPORTED_MODULE_2__._typeof)(reducers)));
        (0, import_invariant.default)(!isArray(reducers) || (0, import_is_plain_object.default)(reducers[0]) && isFunction(reducers[1]), "[app.model] reducers with array should be [Object, Function]");
    }
    if (effects) {
        (0, import_invariant.default)((0, import_is_plain_object.default)(effects), "[app.model] effects should be plain object, but got ".concat((0,_chunk_UFJBA2XG_js__WEBPACK_IMPORTED_MODULE_2__._typeof)(effects)));
    }
    if (subscriptions) {
        (0, import_invariant.default)((0, import_is_plain_object.default)(subscriptions), "[app.model] subscriptions should be plain object, but got ".concat((0,_chunk_UFJBA2XG_js__WEBPACK_IMPORTED_MODULE_2__._typeof)(subscriptions)));
        (0, import_invariant.default)(isAllFunction(subscriptions), "[app.model] subscription should be function");
    }
}
function isAllFunction(obj) {
    return Object.keys(obj).every(function(key) {
        return isFunction(obj[key]);
    });
}
var NAMESPACE_SEP = "/";
function prefix(obj, namespace, type) {
    return Object.keys(obj).reduce(function(memo, key) {
        (0, import_warning.default)(key.indexOf("".concat(namespace).concat(NAMESPACE_SEP)) !== 0, "[prefixNamespace]: ".concat(type, " ").concat(key, " should not be prefixed with namespace ").concat(namespace));
        var newKey = "".concat(namespace).concat(NAMESPACE_SEP).concat(key);
        memo[newKey] = obj[key];
        return memo;
    }, {});
}
function prefixNamespace(model) {
    var namespace = model.namespace, reducers = model.reducers, effects = model.effects;
    if (reducers) {
        if (isArray(reducers)) {
            var _reducers = _toArray(reducers), reducer = _reducers[0], rest = _reducers.slice(1);
            model.reducers = [
                prefix(reducer, namespace, "reducer")
            ].concat(_toConsumableArray(rest));
        } else {
            model.reducers = prefix(reducers, namespace, "reducer");
        }
    }
    if (effects) {
        model.effects = prefix(effects, namespace, "effect");
    }
    return model;
}
var hooks = [
    "onError",
    "onStateChange",
    "onAction",
    "onHmr",
    "onReducer",
    "onEffect",
    "extraReducers",
    "extraEnhancers",
    "_handleActions"
];
function filterHooks(obj) {
    return Object.keys(obj).reduce(function(memo, key) {
        if (hooks.indexOf(key) > -1) {
            memo[key] = obj[key];
        }
        return memo;
    }, {});
}
var Plugin = function() {
    function Plugin2() {
        (0,_chunk_VU5FV6F3_js__WEBPACK_IMPORTED_MODULE_0__._classCallCheck)(this, Plugin2);
        this._handleActions = null;
        this.hooks = hooks.reduce(function(memo, key) {
            memo[key] = [];
            return memo;
        }, {});
    }
    (0,_chunk_VU5FV6F3_js__WEBPACK_IMPORTED_MODULE_0__._createClass)(Plugin2, [
        {
            key: "use",
            value: function use(plugin) {
                (0, import_invariant.default)((0, import_is_plain_object.default)(plugin), "plugin.use: plugin should be plain object");
                var hooks2 = this.hooks;
                for(var key in plugin){
                    if (Object.prototype.hasOwnProperty.call(plugin, key)) {
                        (0, import_invariant.default)(hooks2[key], "plugin.use: unknown plugin property: ".concat(key));
                        if (key === "_handleActions") {
                            this._handleActions = plugin[key];
                        } else if (key === "extraEnhancers") {
                            hooks2[key] = plugin[key];
                        } else {
                            hooks2[key].push(plugin[key]);
                        }
                    }
                }
            }
        },
        {
            key: "apply",
            value: function apply2(key, defaultHandler) {
                var hooks2 = this.hooks;
                var validApplyHooks = [
                    "onError",
                    "onHmr"
                ];
                (0, import_invariant.default)(validApplyHooks.indexOf(key) > -1, "plugin.apply: hook ".concat(key, " cannot be applied"));
                var fns = hooks2[key];
                return function() {
                    if (fns.length) {
                        var _iteratorNormalCompletion = true;
                        var _didIteratorError = false;
                        var _iteratorError = void 0;
                        try {
                            for(var _iterator = fns[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                                var fn = _step.value;
                                fn.apply(void 0, arguments);
                            }
                        } catch (err) {
                            _didIteratorError = true;
                            _iteratorError = err;
                        } finally{
                            try {
                                if (!_iteratorNormalCompletion && _iterator.return != null) {
                                    _iterator.return();
                                }
                            } finally{
                                if (_didIteratorError) {
                                    throw _iteratorError;
                                }
                            }
                        }
                    } else if (defaultHandler) {
                        defaultHandler.apply(void 0, arguments);
                    }
                };
            }
        },
        {
            key: "get",
            value: function get(key) {
                var hooks2 = this.hooks;
                (0, import_invariant.default)(key in hooks2, "plugin.get: hook ".concat(key, " cannot be got"));
                if (key === "extraReducers") {
                    return getExtraReducers(hooks2[key]);
                } else if (key === "onReducer") {
                    return getOnReducer(hooks2[key]);
                } else {
                    return hooks2[key];
                }
            }
        }
    ]);
    return Plugin2;
}();
function getExtraReducers(hook) {
    var ret = {};
    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = void 0;
    try {
        for(var _iterator2 = hook[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true){
            var reducerObj = _step2.value;
            ret = (0,_chunk_L5W4WYYH_js__WEBPACK_IMPORTED_MODULE_1__._objectSpread)({}, ret, reducerObj);
        }
    } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
    } finally{
        try {
            if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
                _iterator2.return();
            }
        } finally{
            if (_didIteratorError2) {
                throw _iteratorError2;
            }
        }
    }
    return ret;
}
function getOnReducer(hook) {
    return function(reducer) {
        var _iteratorNormalCompletion3 = true;
        var _didIteratorError3 = false;
        var _iteratorError3 = void 0;
        try {
            for(var _iterator3 = hook[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true){
                var reducerEnhancer = _step3.value;
                reducer = reducerEnhancer(reducer);
            }
        } catch (err) {
            _didIteratorError3 = true;
            _iteratorError3 = err;
        } finally{
            try {
                if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
                    _iterator3.return();
                }
            } finally{
                if (_didIteratorError3) {
                    throw _iteratorError3;
                }
            }
        }
        return reducer;
    };
}
function createStore2(_ref) {
    var reducers = _ref.reducers, initialState = _ref.initialState, plugin = _ref.plugin, sagaMiddleware = _ref.sagaMiddleware, promiseMiddleware = _ref.promiseMiddleware, _ref$createOpts$setup = _ref.createOpts.setupMiddlewares, setupMiddlewares = _ref$createOpts$setup === void 0 ? returnSelf : _ref$createOpts$setup;
    var extraEnhancers = plugin.get("extraEnhancers");
    (0, import_invariant.default)(isArray(extraEnhancers), "[app.start] extraEnhancers should be array, but got ".concat((0,_chunk_UFJBA2XG_js__WEBPACK_IMPORTED_MODULE_2__._typeof)(extraEnhancers)));
    var extraMiddlewares = plugin.get("onAction");
    var middlewares = setupMiddlewares([
        promiseMiddleware,
        sagaMiddleware
    ].concat(_toConsumableArray((0, import_flatten.default)(extraMiddlewares))));
    var composeEnhancers = import_window.default.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ? import_window.default.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({
        trace: true,
        maxAge: 30
    }) : compose;
    var enhancers = [
        applyMiddleware.apply(void 0, _toConsumableArray(middlewares))
    ].concat(_toConsumableArray(extraEnhancers));
    return createStore(reducers, initialState, composeEnhancers.apply(void 0, _toConsumableArray(enhancers)));
}
function prefixType(type, model) {
    var prefixedType = "".concat(model.namespace).concat(NAMESPACE_SEP).concat(type);
    var typeWithoutAffix = prefixedType.replace(/\/@@[^/]+?$/, "");
    var reducer = Array.isArray(model.reducers) ? model.reducers[0][typeWithoutAffix] : model.reducers && model.reducers[typeWithoutAffix];
    if (reducer || model.effects && model.effects[typeWithoutAffix]) {
        return prefixedType;
    }
    return type;
}
function getSaga(effects$1, model, onError, onEffect) {
    var opts = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : {};
    return import_regenerator.default.mark(function _callee3() {
        var key;
        return import_regenerator.default.wrap(function _callee3$(_context3) {
            while(1){
                switch(_context3.prev = _context3.next){
                    case 0:
                        _context3.t0 = import_regenerator.default.keys(effects$1);
                    case 1:
                        if ((_context3.t1 = _context3.t0()).done) {
                            _context3.next = 7;
                            break;
                        }
                        key = _context3.t1.value;
                        if (!Object.prototype.hasOwnProperty.call(effects$1, key)) {
                            _context3.next = 5;
                            break;
                        }
                        return _context3.delegateYield(import_regenerator.default.mark(function _callee2() {
                            var watcher, task2;
                            return import_regenerator.default.wrap(function _callee2$(_context2) {
                                while(1){
                                    switch(_context2.prev = _context2.next){
                                        case 0:
                                            watcher = getWatcher(key, effects$1[key], model, onError, onEffect, opts);
                                            _context2.next = 3;
                                            return effects_exports.fork(watcher);
                                        case 3:
                                            task2 = _context2.sent;
                                            _context2.next = 6;
                                            return effects_exports.fork(import_regenerator.default.mark(function _callee() {
                                                return import_regenerator.default.wrap(function _callee$(_context) {
                                                    while(1){
                                                        switch(_context.prev = _context.next){
                                                            case 0:
                                                                _context.next = 2;
                                                                return effects_exports.take("".concat(model.namespace, "/@@CANCEL_EFFECTS"));
                                                            case 2:
                                                                _context.next = 4;
                                                                return effects_exports.cancel(task2);
                                                            case 4:
                                                            case "end":
                                                                return _context.stop();
                                                        }
                                                    }
                                                }, _callee);
                                            }));
                                        case 6:
                                        case "end":
                                            return _context2.stop();
                                    }
                                }
                            }, _callee2);
                        })(), "t2", 5);
                    case 5:
                        _context3.next = 1;
                        break;
                    case 7:
                    case "end":
                        return _context3.stop();
                }
            }
        }, _callee3);
    });
}
function getWatcher(key, _effect, model, onError, onEffect, opts) {
    var _marked = import_regenerator.default.mark(sagaWithCatch);
    var effect3 = _effect;
    var type = "takeEvery";
    var ms;
    var delayMs;
    if (Array.isArray(_effect)) {
        var _effect2 = _slicedToArray(_effect, 1);
        effect3 = _effect2[0];
        var _opts = _effect[1];
        if (_opts && _opts.type) {
            type = _opts.type;
            if (type === "throttle") {
                (0, import_invariant.default)(_opts.ms, "app.start: opts.ms should be defined if type is throttle");
                ms = _opts.ms;
            }
            if (type === "poll") {
                (0, import_invariant.default)(_opts.delay, "app.start: opts.delay should be defined if type is poll");
                delayMs = _opts.delay;
            }
        }
        (0, import_invariant.default)([
            "watcher",
            "takeEvery",
            "takeLatest",
            "throttle",
            "poll"
        ].indexOf(type) > -1, "app.start: effect type should be takeEvery, takeLatest, throttle, poll or watcher");
    }
    function noop5() {}
    function sagaWithCatch() {
        var _len, args, _key, _ref, _ref$__dva_resolve, resolve, _ref$__dva_reject, reject, ret, _args4 = arguments;
        return import_regenerator.default.wrap(function sagaWithCatch$(_context4) {
            while(1){
                switch(_context4.prev = _context4.next){
                    case 0:
                        for(_len = _args4.length, args = new Array(_len), _key = 0; _key < _len; _key++){
                            args[_key] = _args4[_key];
                        }
                        _ref = args.length > 0 ? args[0] : {}, _ref$__dva_resolve = _ref.__dva_resolve, resolve = _ref$__dva_resolve === void 0 ? noop5 : _ref$__dva_resolve, _ref$__dva_reject = _ref.__dva_reject, reject = _ref$__dva_reject === void 0 ? noop5 : _ref$__dva_reject;
                        _context4.prev = 2;
                        _context4.next = 5;
                        return effects_exports.put({
                            type: "".concat(key).concat(NAMESPACE_SEP, "@@start")
                        });
                    case 5:
                        _context4.next = 7;
                        return effect3.apply(void 0, _toConsumableArray(args.concat(createEffects(model, opts))));
                    case 7:
                        ret = _context4.sent;
                        _context4.next = 10;
                        return effects_exports.put({
                            type: "".concat(key).concat(NAMESPACE_SEP, "@@end")
                        });
                    case 10:
                        resolve(ret);
                        _context4.next = 17;
                        break;
                    case 13:
                        _context4.prev = 13;
                        _context4.t0 = _context4["catch"](2);
                        onError(_context4.t0, {
                            key,
                            effectArgs: args
                        });
                        if (!_context4.t0._dontReject) {
                            reject(_context4.t0);
                        }
                    case 17:
                    case "end":
                        return _context4.stop();
                }
            }
        }, _marked, null, [
            [
                2,
                13
            ]
        ]);
    }
    var sagaWithOnEffect = applyOnEffect(onEffect, sagaWithCatch, model, key);
    switch(type){
        case "watcher":
            return sagaWithCatch;
        case "takeLatest":
            return import_regenerator.default.mark(function _callee4() {
                return import_regenerator.default.wrap(function _callee4$(_context5) {
                    while(1){
                        switch(_context5.prev = _context5.next){
                            case 0:
                                _context5.next = 2;
                                return effects_exports.takeLatest(key, sagaWithOnEffect);
                            case 2:
                            case "end":
                                return _context5.stop();
                        }
                    }
                }, _callee4);
            });
        case "throttle":
            return import_regenerator.default.mark(function _callee5() {
                return import_regenerator.default.wrap(function _callee5$(_context6) {
                    while(1){
                        switch(_context6.prev = _context6.next){
                            case 0:
                                _context6.next = 2;
                                return effects_exports.throttle(ms, key, sagaWithOnEffect);
                            case 2:
                            case "end":
                                return _context6.stop();
                        }
                    }
                }, _callee5);
            });
        case "poll":
            return import_regenerator.default.mark(function _callee6() {
                var _marked2, delay2, pollSagaWorker, call2, take2, race2, action;
                return import_regenerator.default.wrap(function _callee6$(_context8) {
                    while(1){
                        switch(_context8.prev = _context8.next){
                            case 0:
                                pollSagaWorker = function _ref3(sagaEffects, action2) {
                                    var call3;
                                    return import_regenerator.default.wrap(function pollSagaWorker$(_context7) {
                                        while(1){
                                            switch(_context7.prev = _context7.next){
                                                case 0:
                                                    call3 = sagaEffects.call;
                                                case 1:
                                                    _context7.next = 4;
                                                    return call3(sagaWithOnEffect, action2);
                                                case 4:
                                                    _context7.next = 6;
                                                    return call3(delay2, delayMs);
                                                case 6:
                                                    _context7.next = 1;
                                                    break;
                                                case 8:
                                                case "end":
                                                    return _context7.stop();
                                            }
                                        }
                                    }, _marked2);
                                };
                                delay2 = function _ref2(timeout) {
                                    return new Promise(function(resolve) {
                                        return setTimeout(resolve, timeout);
                                    });
                                };
                                _marked2 = import_regenerator.default.mark(pollSagaWorker);
                                call2 = effects_exports.call, take2 = effects_exports.take, race2 = effects_exports.race;
                            case 4:
                                _context8.next = 7;
                                return take2("".concat(key, "-start"));
                            case 7:
                                action = _context8.sent;
                                _context8.next = 10;
                                return race2([
                                    call2(pollSagaWorker, effects_exports, action),
                                    take2("".concat(key, "-stop"))
                                ]);
                            case 10:
                                _context8.next = 4;
                                break;
                            case 12:
                            case "end":
                                return _context8.stop();
                        }
                    }
                }, _callee6);
            });
        default:
            return import_regenerator.default.mark(function _callee7() {
                return import_regenerator.default.wrap(function _callee7$(_context9) {
                    while(1){
                        switch(_context9.prev = _context9.next){
                            case 0:
                                _context9.next = 2;
                                return effects_exports.takeEvery(key, sagaWithOnEffect);
                            case 2:
                            case "end":
                                return _context9.stop();
                        }
                    }
                }, _callee7);
            });
    }
}
function createEffects(model, opts) {
    function assertAction(type, name) {
        (0, import_invariant.default)(type, "dispatch: action should be a plain Object with type");
        var _opts$namespacePrefix = opts.namespacePrefixWarning, namespacePrefixWarning = _opts$namespacePrefix === void 0 ? true : _opts$namespacePrefix;
        if (namespacePrefixWarning) {
            (0, import_warning.default)(type.indexOf("".concat(model.namespace).concat(NAMESPACE_SEP)) !== 0, "[".concat(name, "] ").concat(type, " should not be prefixed with namespace ").concat(model.namespace));
        }
    }
    function put2(action) {
        var type = action.type;
        assertAction(type, "sagaEffects.put");
        return effects_exports.put((0,_chunk_L5W4WYYH_js__WEBPACK_IMPORTED_MODULE_1__._objectSpread)({}, action, {
            type: prefixType(type, model)
        }));
    }
    function putResolve(action) {
        var type = action.type;
        assertAction(type, "sagaEffects.put.resolve");
        return effects_exports.put.resolve((0,_chunk_L5W4WYYH_js__WEBPACK_IMPORTED_MODULE_1__._objectSpread)({}, action, {
            type: prefixType(type, model)
        }));
    }
    put2.resolve = putResolve;
    function take2(type) {
        if (typeof type === "string") {
            assertAction(type, "sagaEffects.take");
            return effects_exports.take(prefixType(type, model));
        } else if (Array.isArray(type)) {
            return effects_exports.take(type.map(function(t) {
                if (typeof t === "string") {
                    assertAction(t, "sagaEffects.take");
                    return prefixType(t, model);
                }
                return t;
            }));
        } else {
            return effects_exports.take(type);
        }
    }
    return (0,_chunk_L5W4WYYH_js__WEBPACK_IMPORTED_MODULE_1__._objectSpread)({}, effects_exports, {
        put: put2,
        take: take2
    });
}
function applyOnEffect(fns, effect3, model, key) {
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = void 0;
    try {
        for(var _iterator = fns[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
            var fn = _step.value;
            effect3 = fn(effect3, effects_exports, model, key);
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally{
        try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
                _iterator.return();
            }
        } finally{
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }
    return effect3;
}
function identify(value) {
    return value;
}
function handleAction(actionType) {
    var reducer = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : identify;
    return function(state, action) {
        var type = action.type;
        (0, import_invariant.default)(type, "dispatch: action should be a plain Object with type");
        if (actionType === type) {
            return reducer(state, action);
        }
        return state;
    };
}
function reduceReducers() {
    for(var _len = arguments.length, reducers = new Array(_len), _key = 0; _key < _len; _key++){
        reducers[_key] = arguments[_key];
    }
    return function(previous, current) {
        return reducers.reduce(function(p, r) {
            return r(p, current);
        }, previous);
    };
}
function handleActions(handlers, defaultState) {
    var reducers = Object.keys(handlers).map(function(type) {
        return handleAction(type, handlers[type]);
    });
    var reducer = reduceReducers.apply(void 0, _toConsumableArray(reducers));
    return function() {
        var state = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : defaultState;
        var action = arguments.length > 1 ? arguments[1] : void 0;
        return reducer(state, action);
    };
}
function getReducer(reducers, state, handleActions$1) {
    if (Array.isArray(reducers)) {
        return reducers[1]((handleActions$1 || handleActions)(reducers[0], state));
    } else {
        return (handleActions$1 || handleActions)(reducers || {}, state);
    }
}
function createPromiseMiddleware(app) {
    return function() {
        return function(next) {
            return function(action) {
                var type = action.type;
                if (isEffect(type)) {
                    return new Promise(function(resolve, reject) {
                        next((0,_chunk_L5W4WYYH_js__WEBPACK_IMPORTED_MODULE_1__._objectSpread)({
                            __dva_resolve: resolve,
                            __dva_reject: reject
                        }, action));
                    });
                } else {
                    return next(action);
                }
            };
        };
    };
    function isEffect(type) {
        if (!type || typeof type !== "string") return false;
        var _type$split = type.split(NAMESPACE_SEP), _type$split2 = _slicedToArray(_type$split, 1), namespace = _type$split2[0];
        var model = app._models.filter(function(m) {
            return m.namespace === namespace;
        })[0];
        if (model) {
            if (model.effects && model.effects[type]) {
                return true;
            }
        }
        return false;
    }
}
function prefixedDispatch(dispatch, model) {
    return function(action) {
        var type = action.type;
        (0, import_invariant.default)(type, "dispatch: action should be a plain Object with type");
        (0, import_warning.default)(type.indexOf("".concat(model.namespace).concat(NAMESPACE_SEP)) !== 0, "dispatch: ".concat(type, " should not be prefixed with namespace ").concat(model.namespace));
        return dispatch((0,_chunk_L5W4WYYH_js__WEBPACK_IMPORTED_MODULE_1__._objectSpread)({}, action, {
            type: prefixType(type, model)
        }));
    };
}
function run(subs, model, app, onError) {
    var funcs = [];
    var nonFuncs = [];
    for(var key in subs){
        if (Object.prototype.hasOwnProperty.call(subs, key)) {
            var sub = subs[key];
            var unlistener = sub({
                dispatch: prefixedDispatch(app._store.dispatch, model),
                history: app._history
            }, onError);
            if (isFunction(unlistener)) {
                funcs.push(unlistener);
            } else {
                nonFuncs.push(key);
            }
        }
    }
    return {
        funcs,
        nonFuncs
    };
}
function unlisten(unlisteners, namespace) {
    if (!unlisteners[namespace]) return;
    var _unlisteners$namespac = unlisteners[namespace], funcs = _unlisteners$namespac.funcs, nonFuncs = _unlisteners$namespac.nonFuncs;
    (0, import_warning.default)(nonFuncs.length === 0, "[app.unmodel] subscription should return unlistener function, check these subscriptions ".concat(nonFuncs.join(", ")));
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = void 0;
    try {
        for(var _iterator = funcs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
            var unlistener = _step.value;
            unlistener();
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally{
        try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
                _iterator.return();
            }
        } finally{
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }
    delete unlisteners[namespace];
}
var noop$1 = noop3;
var findIndex$1 = findIndex;
var dvaModel = {
    namespace: "@@dva",
    state: 0,
    reducers: {
        UPDATE: function UPDATE(state) {
            return state + 1;
        }
    }
};
function create() {
    var hooksAndOpts = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    var createOpts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var initialReducer = createOpts.initialReducer, _createOpts$setupApp = createOpts.setupApp, setupApp = _createOpts$setupApp === void 0 ? noop$1 : _createOpts$setupApp;
    var plugin = new Plugin();
    plugin.use(filterHooks(hooksAndOpts));
    var app = {
        _models: [
            prefixNamespace((0,_chunk_L5W4WYYH_js__WEBPACK_IMPORTED_MODULE_1__._objectSpread)({}, dvaModel))
        ],
        _store: null,
        _plugin: plugin,
        use: plugin.use.bind(plugin),
        model,
        start
    };
    return app;
    function model(m) {
        if (true) {
            checkModel(m, app._models);
        }
        var prefixedModel = prefixNamespace((0,_chunk_L5W4WYYH_js__WEBPACK_IMPORTED_MODULE_1__._objectSpread)({}, m));
        app._models.push(prefixedModel);
        return prefixedModel;
    }
    function injectModel(createReducer, onError, unlisteners, m) {
        m = model(m);
        var store = app._store;
        store.asyncReducers[m.namespace] = getReducer(m.reducers, m.state, plugin._handleActions);
        store.replaceReducer(createReducer());
        if (m.effects) {
            store.runSaga(app._getSaga(m.effects, m, onError, plugin.get("onEffect"), hooksAndOpts));
        }
        if (m.subscriptions) {
            unlisteners[m.namespace] = run(m.subscriptions, m, app, onError);
        }
    }
    function unmodel(createReducer, reducers, unlisteners, namespace) {
        var store = app._store;
        delete store.asyncReducers[namespace];
        delete reducers[namespace];
        store.replaceReducer(createReducer());
        store.dispatch({
            type: "@@dva/UPDATE"
        });
        store.dispatch({
            type: "".concat(namespace, "/@@CANCEL_EFFECTS")
        });
        unlisten(unlisteners, namespace);
        app._models = app._models.filter(function(model2) {
            return model2.namespace !== namespace;
        });
    }
    function replaceModel(createReducer, reducers, unlisteners, onError, m) {
        var store = app._store;
        var namespace = m.namespace;
        var oldModelIdx = findIndex$1(app._models, function(model2) {
            return model2.namespace === namespace;
        });
        if (~oldModelIdx) {
            store.dispatch({
                type: "".concat(namespace, "/@@CANCEL_EFFECTS")
            });
            delete store.asyncReducers[namespace];
            delete reducers[namespace];
            unlisten(unlisteners, namespace);
            app._models.splice(oldModelIdx, 1);
        }
        app.model(m);
        store.dispatch({
            type: "@@dva/UPDATE"
        });
    }
    function start() {
        var onError = function onError2(err, extension) {
            if (err) {
                if (typeof err === "string") err = new Error(err);
                err.preventDefault = function() {
                    err._dontReject = true;
                };
                plugin.apply("onError", function(err2) {
                    throw new Error(err2.stack || err2);
                })(err, app._store.dispatch, extension);
            }
        };
        var sagaMiddleware = es_default();
        var promiseMiddleware = createPromiseMiddleware(app);
        app._getSaga = getSaga.bind(null);
        var sagas = [];
        var reducers = (0,_chunk_L5W4WYYH_js__WEBPACK_IMPORTED_MODULE_1__._objectSpread)({}, initialReducer);
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = void 0;
        try {
            for(var _iterator = app._models[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                var m = _step.value;
                reducers[m.namespace] = getReducer(m.reducers, m.state, plugin._handleActions);
                if (m.effects) {
                    sagas.push(app._getSaga(m.effects, m, onError, plugin.get("onEffect"), hooksAndOpts));
                }
            }
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally{
            try {
                if (!_iteratorNormalCompletion && _iterator.return != null) {
                    _iterator.return();
                }
            } finally{
                if (_didIteratorError) {
                    throw _iteratorError;
                }
            }
        }
        var reducerEnhancer = plugin.get("onReducer");
        var extraReducers = plugin.get("extraReducers");
        (0, import_invariant.default)(Object.keys(extraReducers).every(function(key) {
            return !(key in reducers);
        }), "[app.start] extraReducers is conflict with other reducers, reducers list: ".concat(Object.keys(reducers).join(", ")));
        app._store = createStore2({
            reducers: createReducer(),
            initialState: hooksAndOpts.initialState || {},
            plugin,
            createOpts,
            sagaMiddleware,
            promiseMiddleware
        });
        var store = app._store;
        store.runSaga = sagaMiddleware.run;
        store.asyncReducers = {};
        var listeners = plugin.get("onStateChange");
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = void 0;
        try {
            var _loop = function _loop2() {
                var listener = _step2.value;
                store.subscribe(function() {
                    listener(store.getState());
                });
            };
            for(var _iterator2 = listeners[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true){
                _loop();
            }
        } catch (err) {
            _didIteratorError2 = true;
            _iteratorError2 = err;
        } finally{
            try {
                if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
                    _iterator2.return();
                }
            } finally{
                if (_didIteratorError2) {
                    throw _iteratorError2;
                }
            }
        }
        sagas.forEach(sagaMiddleware.run);
        setupApp(app);
        var unlisteners = {};
        var _iteratorNormalCompletion3 = true;
        var _didIteratorError3 = false;
        var _iteratorError3 = void 0;
        try {
            for(var _iterator3 = this._models[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true){
                var _model = _step3.value;
                if (_model.subscriptions) {
                    unlisteners[_model.namespace] = run(_model.subscriptions, _model, app, onError);
                }
            }
        } catch (err) {
            _didIteratorError3 = true;
            _iteratorError3 = err;
        } finally{
            try {
                if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
                    _iterator3.return();
                }
            } finally{
                if (_didIteratorError3) {
                    throw _iteratorError3;
                }
            }
        }
        app.model = injectModel.bind(app, createReducer, onError, unlisteners);
        app.unmodel = unmodel.bind(app, createReducer, reducers, unlisteners);
        app.replaceModel = replaceModel.bind(app, createReducer, reducers, unlisteners, onError);
        function createReducer() {
            return reducerEnhancer(combineReducers((0,_chunk_L5W4WYYH_js__WEBPACK_IMPORTED_MODULE_1__._objectSpread)({}, reducers, extraReducers, app._store ? app._store.asyncReducers : {})));
        }
    }
}
 /*!
 * is-plain-object <https://github.com/jonschlinkert/is-plain-object>
 *
 * Copyright (c) 2014-2017, Jon Schlinkert.
 * Released under the MIT License.
 */  /*!
 * isobject <https://github.com/jonschlinkert/isobject>
 *
 * Copyright (c) 2014-2017, Jon Schlinkert.
 * Released under the MIT License.
 */ 


/***/ })

}]);